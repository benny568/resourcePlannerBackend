
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model TeamMember
 * 
 */
export type TeamMember = $Result.DefaultSelection<Prisma.$TeamMemberPayload>
/**
 * Model WorkItem
 * 
 */
export type WorkItem = $Result.DefaultSelection<Prisma.$WorkItemPayload>
/**
 * Model WorkItemDependency
 * 
 */
export type WorkItemDependency = $Result.DefaultSelection<Prisma.$WorkItemDependencyPayload>
/**
 * Model Sprint
 * 
 */
export type Sprint = $Result.DefaultSelection<Prisma.$SprintPayload>
/**
 * Model SprintWorkItem
 * 
 */
export type SprintWorkItem = $Result.DefaultSelection<Prisma.$SprintWorkItemPayload>
/**
 * Model PersonalHoliday
 * 
 */
export type PersonalHoliday = $Result.DefaultSelection<Prisma.$PersonalHolidayPayload>
/**
 * Model PublicHoliday
 * 
 */
export type PublicHoliday = $Result.DefaultSelection<Prisma.$PublicHolidayPayload>
/**
 * Model SprintConfig
 * 
 */
export type SprintConfig = $Result.DefaultSelection<Prisma.$SprintConfigPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TeamMembers
 * const teamMembers = await prisma.teamMember.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TeamMembers
   * const teamMembers = await prisma.teamMember.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workItem`: Exposes CRUD operations for the **WorkItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkItems
    * const workItems = await prisma.workItem.findMany()
    * ```
    */
  get workItem(): Prisma.WorkItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workItemDependency`: Exposes CRUD operations for the **WorkItemDependency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkItemDependencies
    * const workItemDependencies = await prisma.workItemDependency.findMany()
    * ```
    */
  get workItemDependency(): Prisma.WorkItemDependencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprint`: Exposes CRUD operations for the **Sprint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sprints
    * const sprints = await prisma.sprint.findMany()
    * ```
    */
  get sprint(): Prisma.SprintDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprintWorkItem`: Exposes CRUD operations for the **SprintWorkItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SprintWorkItems
    * const sprintWorkItems = await prisma.sprintWorkItem.findMany()
    * ```
    */
  get sprintWorkItem(): Prisma.SprintWorkItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personalHoliday`: Exposes CRUD operations for the **PersonalHoliday** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalHolidays
    * const personalHolidays = await prisma.personalHoliday.findMany()
    * ```
    */
  get personalHoliday(): Prisma.PersonalHolidayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.publicHoliday`: Exposes CRUD operations for the **PublicHoliday** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublicHolidays
    * const publicHolidays = await prisma.publicHoliday.findMany()
    * ```
    */
  get publicHoliday(): Prisma.PublicHolidayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprintConfig`: Exposes CRUD operations for the **SprintConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SprintConfigs
    * const sprintConfigs = await prisma.sprintConfig.findMany()
    * ```
    */
  get sprintConfig(): Prisma.SprintConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    TeamMember: 'TeamMember',
    WorkItem: 'WorkItem',
    WorkItemDependency: 'WorkItemDependency',
    Sprint: 'Sprint',
    SprintWorkItem: 'SprintWorkItem',
    PersonalHoliday: 'PersonalHoliday',
    PublicHoliday: 'PublicHoliday',
    SprintConfig: 'SprintConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "teamMember" | "workItem" | "workItemDependency" | "sprint" | "sprintWorkItem" | "personalHoliday" | "publicHoliday" | "sprintConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      TeamMember: {
        payload: Prisma.$TeamMemberPayload<ExtArgs>
        fields: Prisma.TeamMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findFirst: {
            args: Prisma.TeamMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findMany: {
            args: Prisma.TeamMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          create: {
            args: Prisma.TeamMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          createMany: {
            args: Prisma.TeamMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          delete: {
            args: Prisma.TeamMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          update: {
            args: Prisma.TeamMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          deleteMany: {
            args: Prisma.TeamMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          upsert: {
            args: Prisma.TeamMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          aggregate: {
            args: Prisma.TeamMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMember>
          }
          groupBy: {
            args: Prisma.TeamMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMemberCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberCountAggregateOutputType> | number
          }
        }
      }
      WorkItem: {
        payload: Prisma.$WorkItemPayload<ExtArgs>
        fields: Prisma.WorkItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>
          }
          findFirst: {
            args: Prisma.WorkItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>
          }
          findMany: {
            args: Prisma.WorkItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>[]
          }
          create: {
            args: Prisma.WorkItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>
          }
          createMany: {
            args: Prisma.WorkItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>[]
          }
          delete: {
            args: Prisma.WorkItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>
          }
          update: {
            args: Prisma.WorkItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>
          }
          deleteMany: {
            args: Prisma.WorkItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>[]
          }
          upsert: {
            args: Prisma.WorkItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemPayload>
          }
          aggregate: {
            args: Prisma.WorkItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkItem>
          }
          groupBy: {
            args: Prisma.WorkItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkItemCountArgs<ExtArgs>
            result: $Utils.Optional<WorkItemCountAggregateOutputType> | number
          }
        }
      }
      WorkItemDependency: {
        payload: Prisma.$WorkItemDependencyPayload<ExtArgs>
        fields: Prisma.WorkItemDependencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkItemDependencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkItemDependencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>
          }
          findFirst: {
            args: Prisma.WorkItemDependencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkItemDependencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>
          }
          findMany: {
            args: Prisma.WorkItemDependencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>[]
          }
          create: {
            args: Prisma.WorkItemDependencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>
          }
          createMany: {
            args: Prisma.WorkItemDependencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkItemDependencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>[]
          }
          delete: {
            args: Prisma.WorkItemDependencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>
          }
          update: {
            args: Prisma.WorkItemDependencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>
          }
          deleteMany: {
            args: Prisma.WorkItemDependencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkItemDependencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkItemDependencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>[]
          }
          upsert: {
            args: Prisma.WorkItemDependencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkItemDependencyPayload>
          }
          aggregate: {
            args: Prisma.WorkItemDependencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkItemDependency>
          }
          groupBy: {
            args: Prisma.WorkItemDependencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkItemDependencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkItemDependencyCountArgs<ExtArgs>
            result: $Utils.Optional<WorkItemDependencyCountAggregateOutputType> | number
          }
        }
      }
      Sprint: {
        payload: Prisma.$SprintPayload<ExtArgs>
        fields: Prisma.SprintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SprintFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SprintFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          findFirst: {
            args: Prisma.SprintFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SprintFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          findMany: {
            args: Prisma.SprintFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[]
          }
          create: {
            args: Prisma.SprintCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          createMany: {
            args: Prisma.SprintCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SprintCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[]
          }
          delete: {
            args: Prisma.SprintDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          update: {
            args: Prisma.SprintUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          deleteMany: {
            args: Prisma.SprintDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SprintUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SprintUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[]
          }
          upsert: {
            args: Prisma.SprintUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          aggregate: {
            args: Prisma.SprintAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprint>
          }
          groupBy: {
            args: Prisma.SprintGroupByArgs<ExtArgs>
            result: $Utils.Optional<SprintGroupByOutputType>[]
          }
          count: {
            args: Prisma.SprintCountArgs<ExtArgs>
            result: $Utils.Optional<SprintCountAggregateOutputType> | number
          }
        }
      }
      SprintWorkItem: {
        payload: Prisma.$SprintWorkItemPayload<ExtArgs>
        fields: Prisma.SprintWorkItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SprintWorkItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SprintWorkItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>
          }
          findFirst: {
            args: Prisma.SprintWorkItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SprintWorkItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>
          }
          findMany: {
            args: Prisma.SprintWorkItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>[]
          }
          create: {
            args: Prisma.SprintWorkItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>
          }
          createMany: {
            args: Prisma.SprintWorkItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SprintWorkItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>[]
          }
          delete: {
            args: Prisma.SprintWorkItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>
          }
          update: {
            args: Prisma.SprintWorkItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>
          }
          deleteMany: {
            args: Prisma.SprintWorkItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SprintWorkItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SprintWorkItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>[]
          }
          upsert: {
            args: Prisma.SprintWorkItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintWorkItemPayload>
          }
          aggregate: {
            args: Prisma.SprintWorkItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprintWorkItem>
          }
          groupBy: {
            args: Prisma.SprintWorkItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SprintWorkItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SprintWorkItemCountArgs<ExtArgs>
            result: $Utils.Optional<SprintWorkItemCountAggregateOutputType> | number
          }
        }
      }
      PersonalHoliday: {
        payload: Prisma.$PersonalHolidayPayload<ExtArgs>
        fields: Prisma.PersonalHolidayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalHolidayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalHolidayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>
          }
          findFirst: {
            args: Prisma.PersonalHolidayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalHolidayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>
          }
          findMany: {
            args: Prisma.PersonalHolidayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>[]
          }
          create: {
            args: Prisma.PersonalHolidayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>
          }
          createMany: {
            args: Prisma.PersonalHolidayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonalHolidayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>[]
          }
          delete: {
            args: Prisma.PersonalHolidayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>
          }
          update: {
            args: Prisma.PersonalHolidayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>
          }
          deleteMany: {
            args: Prisma.PersonalHolidayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalHolidayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonalHolidayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>[]
          }
          upsert: {
            args: Prisma.PersonalHolidayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalHolidayPayload>
          }
          aggregate: {
            args: Prisma.PersonalHolidayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonalHoliday>
          }
          groupBy: {
            args: Prisma.PersonalHolidayGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonalHolidayGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalHolidayCountArgs<ExtArgs>
            result: $Utils.Optional<PersonalHolidayCountAggregateOutputType> | number
          }
        }
      }
      PublicHoliday: {
        payload: Prisma.$PublicHolidayPayload<ExtArgs>
        fields: Prisma.PublicHolidayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicHolidayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicHolidayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>
          }
          findFirst: {
            args: Prisma.PublicHolidayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicHolidayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>
          }
          findMany: {
            args: Prisma.PublicHolidayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>[]
          }
          create: {
            args: Prisma.PublicHolidayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>
          }
          createMany: {
            args: Prisma.PublicHolidayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublicHolidayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>[]
          }
          delete: {
            args: Prisma.PublicHolidayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>
          }
          update: {
            args: Prisma.PublicHolidayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>
          }
          deleteMany: {
            args: Prisma.PublicHolidayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublicHolidayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PublicHolidayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>[]
          }
          upsert: {
            args: Prisma.PublicHolidayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicHolidayPayload>
          }
          aggregate: {
            args: Prisma.PublicHolidayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublicHoliday>
          }
          groupBy: {
            args: Prisma.PublicHolidayGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublicHolidayGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicHolidayCountArgs<ExtArgs>
            result: $Utils.Optional<PublicHolidayCountAggregateOutputType> | number
          }
        }
      }
      SprintConfig: {
        payload: Prisma.$SprintConfigPayload<ExtArgs>
        fields: Prisma.SprintConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SprintConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SprintConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>
          }
          findFirst: {
            args: Prisma.SprintConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SprintConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>
          }
          findMany: {
            args: Prisma.SprintConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>[]
          }
          create: {
            args: Prisma.SprintConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>
          }
          createMany: {
            args: Prisma.SprintConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SprintConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>[]
          }
          delete: {
            args: Prisma.SprintConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>
          }
          update: {
            args: Prisma.SprintConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>
          }
          deleteMany: {
            args: Prisma.SprintConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SprintConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SprintConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>[]
          }
          upsert: {
            args: Prisma.SprintConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintConfigPayload>
          }
          aggregate: {
            args: Prisma.SprintConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprintConfig>
          }
          groupBy: {
            args: Prisma.SprintConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SprintConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SprintConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SprintConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    teamMember?: TeamMemberOmit
    workItem?: WorkItemOmit
    workItemDependency?: WorkItemDependencyOmit
    sprint?: SprintOmit
    sprintWorkItem?: SprintWorkItemOmit
    personalHoliday?: PersonalHolidayOmit
    publicHoliday?: PublicHolidayOmit
    sprintConfig?: SprintConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TeamMemberCountOutputType
   */

  export type TeamMemberCountOutputType = {
    personalHolidays: number
  }

  export type TeamMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personalHolidays?: boolean | TeamMemberCountOutputTypeCountPersonalHolidaysArgs
  }

  // Custom InputTypes
  /**
   * TeamMemberCountOutputType without action
   */
  export type TeamMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMemberCountOutputType
     */
    select?: TeamMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamMemberCountOutputType without action
   */
  export type TeamMemberCountOutputTypeCountPersonalHolidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalHolidayWhereInput
  }


  /**
   * Count Type WorkItemCountOutputType
   */

  export type WorkItemCountOutputType = {
    dependencies: number
    dependentWorkItems: number
    sprintAssignments: number
  }

  export type WorkItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dependencies?: boolean | WorkItemCountOutputTypeCountDependenciesArgs
    dependentWorkItems?: boolean | WorkItemCountOutputTypeCountDependentWorkItemsArgs
    sprintAssignments?: boolean | WorkItemCountOutputTypeCountSprintAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * WorkItemCountOutputType without action
   */
  export type WorkItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemCountOutputType
     */
    select?: WorkItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkItemCountOutputType without action
   */
  export type WorkItemCountOutputTypeCountDependenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkItemDependencyWhereInput
  }

  /**
   * WorkItemCountOutputType without action
   */
  export type WorkItemCountOutputTypeCountDependentWorkItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkItemDependencyWhereInput
  }

  /**
   * WorkItemCountOutputType without action
   */
  export type WorkItemCountOutputTypeCountSprintAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintWorkItemWhereInput
  }


  /**
   * Count Type SprintCountOutputType
   */

  export type SprintCountOutputType = {
    workItemAssignments: number
  }

  export type SprintCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workItemAssignments?: boolean | SprintCountOutputTypeCountWorkItemAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * SprintCountOutputType without action
   */
  export type SprintCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintCountOutputType
     */
    select?: SprintCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SprintCountOutputType without action
   */
  export type SprintCountOutputTypeCountWorkItemAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintWorkItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model TeamMember
   */

  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _avg: TeamMemberAvgAggregateOutputType | null
    _sum: TeamMemberSumAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberAvgAggregateOutputType = {
    capacity: number | null
  }

  export type TeamMemberSumAggregateOutputType = {
    capacity: number | null
  }

  export type TeamMemberMinAggregateOutputType = {
    id: string | null
    name: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    id: string | null
    name: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMemberCountAggregateOutputType = {
    id: number
    name: number
    capacity: number
    skills: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamMemberAvgAggregateInputType = {
    capacity?: true
  }

  export type TeamMemberSumAggregateInputType = {
    capacity?: true
  }

  export type TeamMemberMinAggregateInputType = {
    id?: true
    name?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    id?: true
    name?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMemberCountAggregateInputType = {
    id?: true
    name?: true
    capacity?: true
    skills?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMember to aggregate.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithAggregationInput | TeamMemberOrderByWithAggregationInput[]
    by: TeamMemberScalarFieldEnum[] | TeamMemberScalarFieldEnum
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _avg?: TeamMemberAvgAggregateInputType
    _sum?: TeamMemberSumAggregateInputType
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }

  export type TeamMemberGroupByOutputType = {
    id: string
    name: string
    capacity: number
    skills: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: TeamMemberCountAggregateOutputType | null
    _avg: TeamMemberAvgAggregateOutputType | null
    _sum: TeamMemberSumAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    capacity?: boolean
    skills?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    personalHolidays?: boolean | TeamMember$personalHolidaysArgs<ExtArgs>
    _count?: boolean | TeamMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    capacity?: boolean
    skills?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    capacity?: boolean
    skills?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectScalar = {
    id?: boolean
    name?: boolean
    capacity?: boolean
    skills?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "capacity" | "skills" | "createdAt" | "updatedAt", ExtArgs["result"]["teamMember"]>
  export type TeamMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personalHolidays?: boolean | TeamMember$personalHolidaysArgs<ExtArgs>
    _count?: boolean | TeamMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeamMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMember"
    objects: {
      personalHolidays: Prisma.$PersonalHolidayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      capacity: number
      skills: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teamMember"]>
    composites: {}
  }

  type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = $Result.GetResult<Prisma.$TeamMemberPayload, S>

  type TeamMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMemberCountAggregateInputType | true
    }

  export interface TeamMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMemberFindUniqueArgs>(args: SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMemberFindFirstArgs>(args?: SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMemberFindManyArgs>(args?: SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
     */
    create<T extends TeamMemberCreateArgs>(args: SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMemberCreateManyArgs>(args?: SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMembers and returns the data saved in the database.
     * @param {TeamMemberCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMembers and only return the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
     */
    delete<T extends TeamMemberDeleteArgs>(args: SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMemberUpdateArgs>(args: SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMemberDeleteManyArgs>(args?: SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMemberUpdateManyArgs>(args: SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers and returns the data updated in the database.
     * @param {TeamMemberUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMembers and only return the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
     */
    upsert<T extends TeamMemberUpsertArgs>(args: SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMember model
   */
  readonly fields: TeamMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personalHolidays<T extends TeamMember$personalHolidaysArgs<ExtArgs> = {}>(args?: Subset<T, TeamMember$personalHolidaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMember model
   */
  interface TeamMemberFieldRefs {
    readonly id: FieldRef<"TeamMember", 'String'>
    readonly name: FieldRef<"TeamMember", 'String'>
    readonly capacity: FieldRef<"TeamMember", 'Int'>
    readonly skills: FieldRef<"TeamMember", 'Json'>
    readonly createdAt: FieldRef<"TeamMember", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findUniqueOrThrow
   */
  export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findFirstOrThrow
   */
  export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMember.
     */
    data: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }

  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMember createManyAndReturn
   */
  export type TeamMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMember.
     */
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember updateManyAndReturn
   */
  export type TeamMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     */
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     */
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }

  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter which TeamMember to delete.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMember.personalHolidays
   */
  export type TeamMember$personalHolidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    where?: PersonalHolidayWhereInput
    orderBy?: PersonalHolidayOrderByWithRelationInput | PersonalHolidayOrderByWithRelationInput[]
    cursor?: PersonalHolidayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonalHolidayScalarFieldEnum | PersonalHolidayScalarFieldEnum[]
  }

  /**
   * TeamMember without action
   */
  export type TeamMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
  }


  /**
   * Model WorkItem
   */

  export type AggregateWorkItem = {
    _count: WorkItemCountAggregateOutputType | null
    _avg: WorkItemAvgAggregateOutputType | null
    _sum: WorkItemSumAggregateOutputType | null
    _min: WorkItemMinAggregateOutputType | null
    _max: WorkItemMaxAggregateOutputType | null
  }

  export type WorkItemAvgAggregateOutputType = {
    estimateStoryPoints: number | null
  }

  export type WorkItemSumAggregateOutputType = {
    estimateStoryPoints: number | null
  }

  export type WorkItemMinAggregateOutputType = {
    id: string | null
    jiraId: string | null
    title: string | null
    description: string | null
    estimateStoryPoints: number | null
    requiredCompletionDate: Date | null
    status: string | null
    jiraStatus: string | null
    epicId: string | null
    isEpic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkItemMaxAggregateOutputType = {
    id: string | null
    jiraId: string | null
    title: string | null
    description: string | null
    estimateStoryPoints: number | null
    requiredCompletionDate: Date | null
    status: string | null
    jiraStatus: string | null
    epicId: string | null
    isEpic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkItemCountAggregateOutputType = {
    id: number
    jiraId: number
    title: number
    description: number
    estimateStoryPoints: number
    requiredCompletionDate: number
    requiredSkills: number
    status: number
    jiraStatus: number
    epicId: number
    isEpic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkItemAvgAggregateInputType = {
    estimateStoryPoints?: true
  }

  export type WorkItemSumAggregateInputType = {
    estimateStoryPoints?: true
  }

  export type WorkItemMinAggregateInputType = {
    id?: true
    jiraId?: true
    title?: true
    description?: true
    estimateStoryPoints?: true
    requiredCompletionDate?: true
    status?: true
    jiraStatus?: true
    epicId?: true
    isEpic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkItemMaxAggregateInputType = {
    id?: true
    jiraId?: true
    title?: true
    description?: true
    estimateStoryPoints?: true
    requiredCompletionDate?: true
    status?: true
    jiraStatus?: true
    epicId?: true
    isEpic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkItemCountAggregateInputType = {
    id?: true
    jiraId?: true
    title?: true
    description?: true
    estimateStoryPoints?: true
    requiredCompletionDate?: true
    requiredSkills?: true
    status?: true
    jiraStatus?: true
    epicId?: true
    isEpic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkItem to aggregate.
     */
    where?: WorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItems to fetch.
     */
    orderBy?: WorkItemOrderByWithRelationInput | WorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkItems
    **/
    _count?: true | WorkItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkItemMaxAggregateInputType
  }

  export type GetWorkItemAggregateType<T extends WorkItemAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkItem[P]>
      : GetScalarType<T[P], AggregateWorkItem[P]>
  }




  export type WorkItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkItemWhereInput
    orderBy?: WorkItemOrderByWithAggregationInput | WorkItemOrderByWithAggregationInput[]
    by: WorkItemScalarFieldEnum[] | WorkItemScalarFieldEnum
    having?: WorkItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkItemCountAggregateInputType | true
    _avg?: WorkItemAvgAggregateInputType
    _sum?: WorkItemSumAggregateInputType
    _min?: WorkItemMinAggregateInputType
    _max?: WorkItemMaxAggregateInputType
  }

  export type WorkItemGroupByOutputType = {
    id: string
    jiraId: string | null
    title: string
    description: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date
    requiredSkills: JsonValue
    status: string
    jiraStatus: string | null
    epicId: string | null
    isEpic: boolean
    createdAt: Date
    updatedAt: Date
    _count: WorkItemCountAggregateOutputType | null
    _avg: WorkItemAvgAggregateOutputType | null
    _sum: WorkItemSumAggregateOutputType | null
    _min: WorkItemMinAggregateOutputType | null
    _max: WorkItemMaxAggregateOutputType | null
  }

  type GetWorkItemGroupByPayload<T extends WorkItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkItemGroupByOutputType[P]>
            : GetScalarType<T[P], WorkItemGroupByOutputType[P]>
        }
      >
    >


  export type WorkItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jiraId?: boolean
    title?: boolean
    description?: boolean
    estimateStoryPoints?: boolean
    requiredCompletionDate?: boolean
    requiredSkills?: boolean
    status?: boolean
    jiraStatus?: boolean
    epicId?: boolean
    isEpic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dependencies?: boolean | WorkItem$dependenciesArgs<ExtArgs>
    dependentWorkItems?: boolean | WorkItem$dependentWorkItemsArgs<ExtArgs>
    sprintAssignments?: boolean | WorkItem$sprintAssignmentsArgs<ExtArgs>
    _count?: boolean | WorkItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workItem"]>

  export type WorkItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jiraId?: boolean
    title?: boolean
    description?: boolean
    estimateStoryPoints?: boolean
    requiredCompletionDate?: boolean
    requiredSkills?: boolean
    status?: boolean
    jiraStatus?: boolean
    epicId?: boolean
    isEpic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workItem"]>

  export type WorkItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jiraId?: boolean
    title?: boolean
    description?: boolean
    estimateStoryPoints?: boolean
    requiredCompletionDate?: boolean
    requiredSkills?: boolean
    status?: boolean
    jiraStatus?: boolean
    epicId?: boolean
    isEpic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workItem"]>

  export type WorkItemSelectScalar = {
    id?: boolean
    jiraId?: boolean
    title?: boolean
    description?: boolean
    estimateStoryPoints?: boolean
    requiredCompletionDate?: boolean
    requiredSkills?: boolean
    status?: boolean
    jiraStatus?: boolean
    epicId?: boolean
    isEpic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jiraId" | "title" | "description" | "estimateStoryPoints" | "requiredCompletionDate" | "requiredSkills" | "status" | "jiraStatus" | "epicId" | "isEpic" | "createdAt" | "updatedAt", ExtArgs["result"]["workItem"]>
  export type WorkItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dependencies?: boolean | WorkItem$dependenciesArgs<ExtArgs>
    dependentWorkItems?: boolean | WorkItem$dependentWorkItemsArgs<ExtArgs>
    sprintAssignments?: boolean | WorkItem$sprintAssignmentsArgs<ExtArgs>
    _count?: boolean | WorkItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WorkItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkItem"
    objects: {
      dependencies: Prisma.$WorkItemDependencyPayload<ExtArgs>[]
      dependentWorkItems: Prisma.$WorkItemDependencyPayload<ExtArgs>[]
      sprintAssignments: Prisma.$SprintWorkItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jiraId: string | null
      title: string
      description: string | null
      estimateStoryPoints: number
      requiredCompletionDate: Date
      requiredSkills: Prisma.JsonValue
      status: string
      jiraStatus: string | null
      epicId: string | null
      isEpic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workItem"]>
    composites: {}
  }

  type WorkItemGetPayload<S extends boolean | null | undefined | WorkItemDefaultArgs> = $Result.GetResult<Prisma.$WorkItemPayload, S>

  type WorkItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkItemCountAggregateInputType | true
    }

  export interface WorkItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkItem'], meta: { name: 'WorkItem' } }
    /**
     * Find zero or one WorkItem that matches the filter.
     * @param {WorkItemFindUniqueArgs} args - Arguments to find a WorkItem
     * @example
     * // Get one WorkItem
     * const workItem = await prisma.workItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkItemFindUniqueArgs>(args: SelectSubset<T, WorkItemFindUniqueArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkItemFindUniqueOrThrowArgs} args - Arguments to find a WorkItem
     * @example
     * // Get one WorkItem
     * const workItem = await prisma.workItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkItemFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemFindFirstArgs} args - Arguments to find a WorkItem
     * @example
     * // Get one WorkItem
     * const workItem = await prisma.workItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkItemFindFirstArgs>(args?: SelectSubset<T, WorkItemFindFirstArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemFindFirstOrThrowArgs} args - Arguments to find a WorkItem
     * @example
     * // Get one WorkItem
     * const workItem = await prisma.workItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkItemFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkItems
     * const workItems = await prisma.workItem.findMany()
     * 
     * // Get first 10 WorkItems
     * const workItems = await prisma.workItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workItemWithIdOnly = await prisma.workItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkItemFindManyArgs>(args?: SelectSubset<T, WorkItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkItem.
     * @param {WorkItemCreateArgs} args - Arguments to create a WorkItem.
     * @example
     * // Create one WorkItem
     * const WorkItem = await prisma.workItem.create({
     *   data: {
     *     // ... data to create a WorkItem
     *   }
     * })
     * 
     */
    create<T extends WorkItemCreateArgs>(args: SelectSubset<T, WorkItemCreateArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkItems.
     * @param {WorkItemCreateManyArgs} args - Arguments to create many WorkItems.
     * @example
     * // Create many WorkItems
     * const workItem = await prisma.workItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkItemCreateManyArgs>(args?: SelectSubset<T, WorkItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkItems and returns the data saved in the database.
     * @param {WorkItemCreateManyAndReturnArgs} args - Arguments to create many WorkItems.
     * @example
     * // Create many WorkItems
     * const workItem = await prisma.workItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkItems and only return the `id`
     * const workItemWithIdOnly = await prisma.workItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkItemCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkItem.
     * @param {WorkItemDeleteArgs} args - Arguments to delete one WorkItem.
     * @example
     * // Delete one WorkItem
     * const WorkItem = await prisma.workItem.delete({
     *   where: {
     *     // ... filter to delete one WorkItem
     *   }
     * })
     * 
     */
    delete<T extends WorkItemDeleteArgs>(args: SelectSubset<T, WorkItemDeleteArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkItem.
     * @param {WorkItemUpdateArgs} args - Arguments to update one WorkItem.
     * @example
     * // Update one WorkItem
     * const workItem = await prisma.workItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkItemUpdateArgs>(args: SelectSubset<T, WorkItemUpdateArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkItems.
     * @param {WorkItemDeleteManyArgs} args - Arguments to filter WorkItems to delete.
     * @example
     * // Delete a few WorkItems
     * const { count } = await prisma.workItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkItemDeleteManyArgs>(args?: SelectSubset<T, WorkItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkItems
     * const workItem = await prisma.workItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkItemUpdateManyArgs>(args: SelectSubset<T, WorkItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkItems and returns the data updated in the database.
     * @param {WorkItemUpdateManyAndReturnArgs} args - Arguments to update many WorkItems.
     * @example
     * // Update many WorkItems
     * const workItem = await prisma.workItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkItems and only return the `id`
     * const workItemWithIdOnly = await prisma.workItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkItemUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkItem.
     * @param {WorkItemUpsertArgs} args - Arguments to update or create a WorkItem.
     * @example
     * // Update or create a WorkItem
     * const workItem = await prisma.workItem.upsert({
     *   create: {
     *     // ... data to create a WorkItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkItem we want to update
     *   }
     * })
     */
    upsert<T extends WorkItemUpsertArgs>(args: SelectSubset<T, WorkItemUpsertArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemCountArgs} args - Arguments to filter WorkItems to count.
     * @example
     * // Count the number of WorkItems
     * const count = await prisma.workItem.count({
     *   where: {
     *     // ... the filter for the WorkItems we want to count
     *   }
     * })
    **/
    count<T extends WorkItemCountArgs>(
      args?: Subset<T, WorkItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkItemAggregateArgs>(args: Subset<T, WorkItemAggregateArgs>): Prisma.PrismaPromise<GetWorkItemAggregateType<T>>

    /**
     * Group by WorkItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkItemGroupByArgs['orderBy'] }
        : { orderBy?: WorkItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkItem model
   */
  readonly fields: WorkItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dependencies<T extends WorkItem$dependenciesArgs<ExtArgs> = {}>(args?: Subset<T, WorkItem$dependenciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dependentWorkItems<T extends WorkItem$dependentWorkItemsArgs<ExtArgs> = {}>(args?: Subset<T, WorkItem$dependentWorkItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sprintAssignments<T extends WorkItem$sprintAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, WorkItem$sprintAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkItem model
   */
  interface WorkItemFieldRefs {
    readonly id: FieldRef<"WorkItem", 'String'>
    readonly jiraId: FieldRef<"WorkItem", 'String'>
    readonly title: FieldRef<"WorkItem", 'String'>
    readonly description: FieldRef<"WorkItem", 'String'>
    readonly estimateStoryPoints: FieldRef<"WorkItem", 'Float'>
    readonly requiredCompletionDate: FieldRef<"WorkItem", 'DateTime'>
    readonly requiredSkills: FieldRef<"WorkItem", 'Json'>
    readonly status: FieldRef<"WorkItem", 'String'>
    readonly jiraStatus: FieldRef<"WorkItem", 'String'>
    readonly epicId: FieldRef<"WorkItem", 'String'>
    readonly isEpic: FieldRef<"WorkItem", 'Boolean'>
    readonly createdAt: FieldRef<"WorkItem", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkItem findUnique
   */
  export type WorkItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * Filter, which WorkItem to fetch.
     */
    where: WorkItemWhereUniqueInput
  }

  /**
   * WorkItem findUniqueOrThrow
   */
  export type WorkItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * Filter, which WorkItem to fetch.
     */
    where: WorkItemWhereUniqueInput
  }

  /**
   * WorkItem findFirst
   */
  export type WorkItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * Filter, which WorkItem to fetch.
     */
    where?: WorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItems to fetch.
     */
    orderBy?: WorkItemOrderByWithRelationInput | WorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkItems.
     */
    cursor?: WorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkItems.
     */
    distinct?: WorkItemScalarFieldEnum | WorkItemScalarFieldEnum[]
  }

  /**
   * WorkItem findFirstOrThrow
   */
  export type WorkItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * Filter, which WorkItem to fetch.
     */
    where?: WorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItems to fetch.
     */
    orderBy?: WorkItemOrderByWithRelationInput | WorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkItems.
     */
    cursor?: WorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkItems.
     */
    distinct?: WorkItemScalarFieldEnum | WorkItemScalarFieldEnum[]
  }

  /**
   * WorkItem findMany
   */
  export type WorkItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * Filter, which WorkItems to fetch.
     */
    where?: WorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItems to fetch.
     */
    orderBy?: WorkItemOrderByWithRelationInput | WorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkItems.
     */
    cursor?: WorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItems.
     */
    skip?: number
    distinct?: WorkItemScalarFieldEnum | WorkItemScalarFieldEnum[]
  }

  /**
   * WorkItem create
   */
  export type WorkItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkItem.
     */
    data: XOR<WorkItemCreateInput, WorkItemUncheckedCreateInput>
  }

  /**
   * WorkItem createMany
   */
  export type WorkItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkItems.
     */
    data: WorkItemCreateManyInput | WorkItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkItem createManyAndReturn
   */
  export type WorkItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * The data used to create many WorkItems.
     */
    data: WorkItemCreateManyInput | WorkItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkItem update
   */
  export type WorkItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkItem.
     */
    data: XOR<WorkItemUpdateInput, WorkItemUncheckedUpdateInput>
    /**
     * Choose, which WorkItem to update.
     */
    where: WorkItemWhereUniqueInput
  }

  /**
   * WorkItem updateMany
   */
  export type WorkItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkItems.
     */
    data: XOR<WorkItemUpdateManyMutationInput, WorkItemUncheckedUpdateManyInput>
    /**
     * Filter which WorkItems to update
     */
    where?: WorkItemWhereInput
    /**
     * Limit how many WorkItems to update.
     */
    limit?: number
  }

  /**
   * WorkItem updateManyAndReturn
   */
  export type WorkItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * The data used to update WorkItems.
     */
    data: XOR<WorkItemUpdateManyMutationInput, WorkItemUncheckedUpdateManyInput>
    /**
     * Filter which WorkItems to update
     */
    where?: WorkItemWhereInput
    /**
     * Limit how many WorkItems to update.
     */
    limit?: number
  }

  /**
   * WorkItem upsert
   */
  export type WorkItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkItem to update in case it exists.
     */
    where: WorkItemWhereUniqueInput
    /**
     * In case the WorkItem found by the `where` argument doesn't exist, create a new WorkItem with this data.
     */
    create: XOR<WorkItemCreateInput, WorkItemUncheckedCreateInput>
    /**
     * In case the WorkItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkItemUpdateInput, WorkItemUncheckedUpdateInput>
  }

  /**
   * WorkItem delete
   */
  export type WorkItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
    /**
     * Filter which WorkItem to delete.
     */
    where: WorkItemWhereUniqueInput
  }

  /**
   * WorkItem deleteMany
   */
  export type WorkItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkItems to delete
     */
    where?: WorkItemWhereInput
    /**
     * Limit how many WorkItems to delete.
     */
    limit?: number
  }

  /**
   * WorkItem.dependencies
   */
  export type WorkItem$dependenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    where?: WorkItemDependencyWhereInput
    orderBy?: WorkItemDependencyOrderByWithRelationInput | WorkItemDependencyOrderByWithRelationInput[]
    cursor?: WorkItemDependencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkItemDependencyScalarFieldEnum | WorkItemDependencyScalarFieldEnum[]
  }

  /**
   * WorkItem.dependentWorkItems
   */
  export type WorkItem$dependentWorkItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    where?: WorkItemDependencyWhereInput
    orderBy?: WorkItemDependencyOrderByWithRelationInput | WorkItemDependencyOrderByWithRelationInput[]
    cursor?: WorkItemDependencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkItemDependencyScalarFieldEnum | WorkItemDependencyScalarFieldEnum[]
  }

  /**
   * WorkItem.sprintAssignments
   */
  export type WorkItem$sprintAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    where?: SprintWorkItemWhereInput
    orderBy?: SprintWorkItemOrderByWithRelationInput | SprintWorkItemOrderByWithRelationInput[]
    cursor?: SprintWorkItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintWorkItemScalarFieldEnum | SprintWorkItemScalarFieldEnum[]
  }

  /**
   * WorkItem without action
   */
  export type WorkItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItem
     */
    select?: WorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItem
     */
    omit?: WorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemInclude<ExtArgs> | null
  }


  /**
   * Model WorkItemDependency
   */

  export type AggregateWorkItemDependency = {
    _count: WorkItemDependencyCountAggregateOutputType | null
    _min: WorkItemDependencyMinAggregateOutputType | null
    _max: WorkItemDependencyMaxAggregateOutputType | null
  }

  export type WorkItemDependencyMinAggregateOutputType = {
    workItemId: string | null
    dependsOnId: string | null
    createdAt: Date | null
  }

  export type WorkItemDependencyMaxAggregateOutputType = {
    workItemId: string | null
    dependsOnId: string | null
    createdAt: Date | null
  }

  export type WorkItemDependencyCountAggregateOutputType = {
    workItemId: number
    dependsOnId: number
    createdAt: number
    _all: number
  }


  export type WorkItemDependencyMinAggregateInputType = {
    workItemId?: true
    dependsOnId?: true
    createdAt?: true
  }

  export type WorkItemDependencyMaxAggregateInputType = {
    workItemId?: true
    dependsOnId?: true
    createdAt?: true
  }

  export type WorkItemDependencyCountAggregateInputType = {
    workItemId?: true
    dependsOnId?: true
    createdAt?: true
    _all?: true
  }

  export type WorkItemDependencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkItemDependency to aggregate.
     */
    where?: WorkItemDependencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItemDependencies to fetch.
     */
    orderBy?: WorkItemDependencyOrderByWithRelationInput | WorkItemDependencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkItemDependencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItemDependencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItemDependencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkItemDependencies
    **/
    _count?: true | WorkItemDependencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkItemDependencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkItemDependencyMaxAggregateInputType
  }

  export type GetWorkItemDependencyAggregateType<T extends WorkItemDependencyAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkItemDependency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkItemDependency[P]>
      : GetScalarType<T[P], AggregateWorkItemDependency[P]>
  }




  export type WorkItemDependencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkItemDependencyWhereInput
    orderBy?: WorkItemDependencyOrderByWithAggregationInput | WorkItemDependencyOrderByWithAggregationInput[]
    by: WorkItemDependencyScalarFieldEnum[] | WorkItemDependencyScalarFieldEnum
    having?: WorkItemDependencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkItemDependencyCountAggregateInputType | true
    _min?: WorkItemDependencyMinAggregateInputType
    _max?: WorkItemDependencyMaxAggregateInputType
  }

  export type WorkItemDependencyGroupByOutputType = {
    workItemId: string
    dependsOnId: string
    createdAt: Date
    _count: WorkItemDependencyCountAggregateOutputType | null
    _min: WorkItemDependencyMinAggregateOutputType | null
    _max: WorkItemDependencyMaxAggregateOutputType | null
  }

  type GetWorkItemDependencyGroupByPayload<T extends WorkItemDependencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkItemDependencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkItemDependencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkItemDependencyGroupByOutputType[P]>
            : GetScalarType<T[P], WorkItemDependencyGroupByOutputType[P]>
        }
      >
    >


  export type WorkItemDependencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workItemId?: boolean
    dependsOnId?: boolean
    createdAt?: boolean
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
    dependsOn?: boolean | WorkItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workItemDependency"]>

  export type WorkItemDependencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workItemId?: boolean
    dependsOnId?: boolean
    createdAt?: boolean
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
    dependsOn?: boolean | WorkItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workItemDependency"]>

  export type WorkItemDependencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workItemId?: boolean
    dependsOnId?: boolean
    createdAt?: boolean
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
    dependsOn?: boolean | WorkItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workItemDependency"]>

  export type WorkItemDependencySelectScalar = {
    workItemId?: boolean
    dependsOnId?: boolean
    createdAt?: boolean
  }

  export type WorkItemDependencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"workItemId" | "dependsOnId" | "createdAt", ExtArgs["result"]["workItemDependency"]>
  export type WorkItemDependencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
    dependsOn?: boolean | WorkItemDefaultArgs<ExtArgs>
  }
  export type WorkItemDependencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
    dependsOn?: boolean | WorkItemDefaultArgs<ExtArgs>
  }
  export type WorkItemDependencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
    dependsOn?: boolean | WorkItemDefaultArgs<ExtArgs>
  }

  export type $WorkItemDependencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkItemDependency"
    objects: {
      workItem: Prisma.$WorkItemPayload<ExtArgs>
      dependsOn: Prisma.$WorkItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      workItemId: string
      dependsOnId: string
      createdAt: Date
    }, ExtArgs["result"]["workItemDependency"]>
    composites: {}
  }

  type WorkItemDependencyGetPayload<S extends boolean | null | undefined | WorkItemDependencyDefaultArgs> = $Result.GetResult<Prisma.$WorkItemDependencyPayload, S>

  type WorkItemDependencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkItemDependencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkItemDependencyCountAggregateInputType | true
    }

  export interface WorkItemDependencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkItemDependency'], meta: { name: 'WorkItemDependency' } }
    /**
     * Find zero or one WorkItemDependency that matches the filter.
     * @param {WorkItemDependencyFindUniqueArgs} args - Arguments to find a WorkItemDependency
     * @example
     * // Get one WorkItemDependency
     * const workItemDependency = await prisma.workItemDependency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkItemDependencyFindUniqueArgs>(args: SelectSubset<T, WorkItemDependencyFindUniqueArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkItemDependency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkItemDependencyFindUniqueOrThrowArgs} args - Arguments to find a WorkItemDependency
     * @example
     * // Get one WorkItemDependency
     * const workItemDependency = await prisma.workItemDependency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkItemDependencyFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkItemDependencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkItemDependency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyFindFirstArgs} args - Arguments to find a WorkItemDependency
     * @example
     * // Get one WorkItemDependency
     * const workItemDependency = await prisma.workItemDependency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkItemDependencyFindFirstArgs>(args?: SelectSubset<T, WorkItemDependencyFindFirstArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkItemDependency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyFindFirstOrThrowArgs} args - Arguments to find a WorkItemDependency
     * @example
     * // Get one WorkItemDependency
     * const workItemDependency = await prisma.workItemDependency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkItemDependencyFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkItemDependencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkItemDependencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkItemDependencies
     * const workItemDependencies = await prisma.workItemDependency.findMany()
     * 
     * // Get first 10 WorkItemDependencies
     * const workItemDependencies = await prisma.workItemDependency.findMany({ take: 10 })
     * 
     * // Only select the `workItemId`
     * const workItemDependencyWithWorkItemIdOnly = await prisma.workItemDependency.findMany({ select: { workItemId: true } })
     * 
     */
    findMany<T extends WorkItemDependencyFindManyArgs>(args?: SelectSubset<T, WorkItemDependencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkItemDependency.
     * @param {WorkItemDependencyCreateArgs} args - Arguments to create a WorkItemDependency.
     * @example
     * // Create one WorkItemDependency
     * const WorkItemDependency = await prisma.workItemDependency.create({
     *   data: {
     *     // ... data to create a WorkItemDependency
     *   }
     * })
     * 
     */
    create<T extends WorkItemDependencyCreateArgs>(args: SelectSubset<T, WorkItemDependencyCreateArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkItemDependencies.
     * @param {WorkItemDependencyCreateManyArgs} args - Arguments to create many WorkItemDependencies.
     * @example
     * // Create many WorkItemDependencies
     * const workItemDependency = await prisma.workItemDependency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkItemDependencyCreateManyArgs>(args?: SelectSubset<T, WorkItemDependencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkItemDependencies and returns the data saved in the database.
     * @param {WorkItemDependencyCreateManyAndReturnArgs} args - Arguments to create many WorkItemDependencies.
     * @example
     * // Create many WorkItemDependencies
     * const workItemDependency = await prisma.workItemDependency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkItemDependencies and only return the `workItemId`
     * const workItemDependencyWithWorkItemIdOnly = await prisma.workItemDependency.createManyAndReturn({
     *   select: { workItemId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkItemDependencyCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkItemDependencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkItemDependency.
     * @param {WorkItemDependencyDeleteArgs} args - Arguments to delete one WorkItemDependency.
     * @example
     * // Delete one WorkItemDependency
     * const WorkItemDependency = await prisma.workItemDependency.delete({
     *   where: {
     *     // ... filter to delete one WorkItemDependency
     *   }
     * })
     * 
     */
    delete<T extends WorkItemDependencyDeleteArgs>(args: SelectSubset<T, WorkItemDependencyDeleteArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkItemDependency.
     * @param {WorkItemDependencyUpdateArgs} args - Arguments to update one WorkItemDependency.
     * @example
     * // Update one WorkItemDependency
     * const workItemDependency = await prisma.workItemDependency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkItemDependencyUpdateArgs>(args: SelectSubset<T, WorkItemDependencyUpdateArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkItemDependencies.
     * @param {WorkItemDependencyDeleteManyArgs} args - Arguments to filter WorkItemDependencies to delete.
     * @example
     * // Delete a few WorkItemDependencies
     * const { count } = await prisma.workItemDependency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkItemDependencyDeleteManyArgs>(args?: SelectSubset<T, WorkItemDependencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkItemDependencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkItemDependencies
     * const workItemDependency = await prisma.workItemDependency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkItemDependencyUpdateManyArgs>(args: SelectSubset<T, WorkItemDependencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkItemDependencies and returns the data updated in the database.
     * @param {WorkItemDependencyUpdateManyAndReturnArgs} args - Arguments to update many WorkItemDependencies.
     * @example
     * // Update many WorkItemDependencies
     * const workItemDependency = await prisma.workItemDependency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkItemDependencies and only return the `workItemId`
     * const workItemDependencyWithWorkItemIdOnly = await prisma.workItemDependency.updateManyAndReturn({
     *   select: { workItemId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkItemDependencyUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkItemDependencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkItemDependency.
     * @param {WorkItemDependencyUpsertArgs} args - Arguments to update or create a WorkItemDependency.
     * @example
     * // Update or create a WorkItemDependency
     * const workItemDependency = await prisma.workItemDependency.upsert({
     *   create: {
     *     // ... data to create a WorkItemDependency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkItemDependency we want to update
     *   }
     * })
     */
    upsert<T extends WorkItemDependencyUpsertArgs>(args: SelectSubset<T, WorkItemDependencyUpsertArgs<ExtArgs>>): Prisma__WorkItemDependencyClient<$Result.GetResult<Prisma.$WorkItemDependencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkItemDependencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyCountArgs} args - Arguments to filter WorkItemDependencies to count.
     * @example
     * // Count the number of WorkItemDependencies
     * const count = await prisma.workItemDependency.count({
     *   where: {
     *     // ... the filter for the WorkItemDependencies we want to count
     *   }
     * })
    **/
    count<T extends WorkItemDependencyCountArgs>(
      args?: Subset<T, WorkItemDependencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkItemDependencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkItemDependency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkItemDependencyAggregateArgs>(args: Subset<T, WorkItemDependencyAggregateArgs>): Prisma.PrismaPromise<GetWorkItemDependencyAggregateType<T>>

    /**
     * Group by WorkItemDependency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemDependencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkItemDependencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkItemDependencyGroupByArgs['orderBy'] }
        : { orderBy?: WorkItemDependencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkItemDependencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkItemDependencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkItemDependency model
   */
  readonly fields: WorkItemDependencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkItemDependency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkItemDependencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workItem<T extends WorkItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkItemDefaultArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    dependsOn<T extends WorkItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkItemDefaultArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkItemDependency model
   */
  interface WorkItemDependencyFieldRefs {
    readonly workItemId: FieldRef<"WorkItemDependency", 'String'>
    readonly dependsOnId: FieldRef<"WorkItemDependency", 'String'>
    readonly createdAt: FieldRef<"WorkItemDependency", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkItemDependency findUnique
   */
  export type WorkItemDependencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * Filter, which WorkItemDependency to fetch.
     */
    where: WorkItemDependencyWhereUniqueInput
  }

  /**
   * WorkItemDependency findUniqueOrThrow
   */
  export type WorkItemDependencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * Filter, which WorkItemDependency to fetch.
     */
    where: WorkItemDependencyWhereUniqueInput
  }

  /**
   * WorkItemDependency findFirst
   */
  export type WorkItemDependencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * Filter, which WorkItemDependency to fetch.
     */
    where?: WorkItemDependencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItemDependencies to fetch.
     */
    orderBy?: WorkItemDependencyOrderByWithRelationInput | WorkItemDependencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkItemDependencies.
     */
    cursor?: WorkItemDependencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItemDependencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItemDependencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkItemDependencies.
     */
    distinct?: WorkItemDependencyScalarFieldEnum | WorkItemDependencyScalarFieldEnum[]
  }

  /**
   * WorkItemDependency findFirstOrThrow
   */
  export type WorkItemDependencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * Filter, which WorkItemDependency to fetch.
     */
    where?: WorkItemDependencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItemDependencies to fetch.
     */
    orderBy?: WorkItemDependencyOrderByWithRelationInput | WorkItemDependencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkItemDependencies.
     */
    cursor?: WorkItemDependencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItemDependencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItemDependencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkItemDependencies.
     */
    distinct?: WorkItemDependencyScalarFieldEnum | WorkItemDependencyScalarFieldEnum[]
  }

  /**
   * WorkItemDependency findMany
   */
  export type WorkItemDependencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * Filter, which WorkItemDependencies to fetch.
     */
    where?: WorkItemDependencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkItemDependencies to fetch.
     */
    orderBy?: WorkItemDependencyOrderByWithRelationInput | WorkItemDependencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkItemDependencies.
     */
    cursor?: WorkItemDependencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkItemDependencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkItemDependencies.
     */
    skip?: number
    distinct?: WorkItemDependencyScalarFieldEnum | WorkItemDependencyScalarFieldEnum[]
  }

  /**
   * WorkItemDependency create
   */
  export type WorkItemDependencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkItemDependency.
     */
    data: XOR<WorkItemDependencyCreateInput, WorkItemDependencyUncheckedCreateInput>
  }

  /**
   * WorkItemDependency createMany
   */
  export type WorkItemDependencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkItemDependencies.
     */
    data: WorkItemDependencyCreateManyInput | WorkItemDependencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkItemDependency createManyAndReturn
   */
  export type WorkItemDependencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * The data used to create many WorkItemDependencies.
     */
    data: WorkItemDependencyCreateManyInput | WorkItemDependencyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkItemDependency update
   */
  export type WorkItemDependencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkItemDependency.
     */
    data: XOR<WorkItemDependencyUpdateInput, WorkItemDependencyUncheckedUpdateInput>
    /**
     * Choose, which WorkItemDependency to update.
     */
    where: WorkItemDependencyWhereUniqueInput
  }

  /**
   * WorkItemDependency updateMany
   */
  export type WorkItemDependencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkItemDependencies.
     */
    data: XOR<WorkItemDependencyUpdateManyMutationInput, WorkItemDependencyUncheckedUpdateManyInput>
    /**
     * Filter which WorkItemDependencies to update
     */
    where?: WorkItemDependencyWhereInput
    /**
     * Limit how many WorkItemDependencies to update.
     */
    limit?: number
  }

  /**
   * WorkItemDependency updateManyAndReturn
   */
  export type WorkItemDependencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * The data used to update WorkItemDependencies.
     */
    data: XOR<WorkItemDependencyUpdateManyMutationInput, WorkItemDependencyUncheckedUpdateManyInput>
    /**
     * Filter which WorkItemDependencies to update
     */
    where?: WorkItemDependencyWhereInput
    /**
     * Limit how many WorkItemDependencies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkItemDependency upsert
   */
  export type WorkItemDependencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkItemDependency to update in case it exists.
     */
    where: WorkItemDependencyWhereUniqueInput
    /**
     * In case the WorkItemDependency found by the `where` argument doesn't exist, create a new WorkItemDependency with this data.
     */
    create: XOR<WorkItemDependencyCreateInput, WorkItemDependencyUncheckedCreateInput>
    /**
     * In case the WorkItemDependency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkItemDependencyUpdateInput, WorkItemDependencyUncheckedUpdateInput>
  }

  /**
   * WorkItemDependency delete
   */
  export type WorkItemDependencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
    /**
     * Filter which WorkItemDependency to delete.
     */
    where: WorkItemDependencyWhereUniqueInput
  }

  /**
   * WorkItemDependency deleteMany
   */
  export type WorkItemDependencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkItemDependencies to delete
     */
    where?: WorkItemDependencyWhereInput
    /**
     * Limit how many WorkItemDependencies to delete.
     */
    limit?: number
  }

  /**
   * WorkItemDependency without action
   */
  export type WorkItemDependencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkItemDependency
     */
    select?: WorkItemDependencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkItemDependency
     */
    omit?: WorkItemDependencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkItemDependencyInclude<ExtArgs> | null
  }


  /**
   * Model Sprint
   */

  export type AggregateSprint = {
    _count: SprintCountAggregateOutputType | null
    _avg: SprintAvgAggregateOutputType | null
    _sum: SprintSumAggregateOutputType | null
    _min: SprintMinAggregateOutputType | null
    _max: SprintMaxAggregateOutputType | null
  }

  export type SprintAvgAggregateOutputType = {
    plannedVelocity: number | null
    actualVelocity: number | null
  }

  export type SprintSumAggregateOutputType = {
    plannedVelocity: number | null
    actualVelocity: number | null
  }

  export type SprintMinAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    plannedVelocity: number | null
    actualVelocity: number | null
    archived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SprintMaxAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    plannedVelocity: number | null
    actualVelocity: number | null
    archived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SprintCountAggregateOutputType = {
    id: number
    name: number
    startDate: number
    endDate: number
    plannedVelocity: number
    actualVelocity: number
    archived: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SprintAvgAggregateInputType = {
    plannedVelocity?: true
    actualVelocity?: true
  }

  export type SprintSumAggregateInputType = {
    plannedVelocity?: true
    actualVelocity?: true
  }

  export type SprintMinAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    plannedVelocity?: true
    actualVelocity?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SprintMaxAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    plannedVelocity?: true
    actualVelocity?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SprintCountAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    plannedVelocity?: true
    actualVelocity?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SprintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sprint to aggregate.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sprints
    **/
    _count?: true | SprintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SprintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SprintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SprintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SprintMaxAggregateInputType
  }

  export type GetSprintAggregateType<T extends SprintAggregateArgs> = {
        [P in keyof T & keyof AggregateSprint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprint[P]>
      : GetScalarType<T[P], AggregateSprint[P]>
  }




  export type SprintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintWhereInput
    orderBy?: SprintOrderByWithAggregationInput | SprintOrderByWithAggregationInput[]
    by: SprintScalarFieldEnum[] | SprintScalarFieldEnum
    having?: SprintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SprintCountAggregateInputType | true
    _avg?: SprintAvgAggregateInputType
    _sum?: SprintSumAggregateInputType
    _min?: SprintMinAggregateInputType
    _max?: SprintMaxAggregateInputType
  }

  export type SprintGroupByOutputType = {
    id: string
    name: string
    startDate: Date
    endDate: Date
    plannedVelocity: number
    actualVelocity: number | null
    archived: boolean
    createdAt: Date
    updatedAt: Date
    _count: SprintCountAggregateOutputType | null
    _avg: SprintAvgAggregateOutputType | null
    _sum: SprintSumAggregateOutputType | null
    _min: SprintMinAggregateOutputType | null
    _max: SprintMaxAggregateOutputType | null
  }

  type GetSprintGroupByPayload<T extends SprintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SprintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SprintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintGroupByOutputType[P]>
            : GetScalarType<T[P], SprintGroupByOutputType[P]>
        }
      >
    >


  export type SprintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    plannedVelocity?: boolean
    actualVelocity?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workItemAssignments?: boolean | Sprint$workItemAssignmentsArgs<ExtArgs>
    _count?: boolean | SprintCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprint"]>

  export type SprintSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    plannedVelocity?: boolean
    actualVelocity?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sprint"]>

  export type SprintSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    plannedVelocity?: boolean
    actualVelocity?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sprint"]>

  export type SprintSelectScalar = {
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    plannedVelocity?: boolean
    actualVelocity?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SprintOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "startDate" | "endDate" | "plannedVelocity" | "actualVelocity" | "archived" | "createdAt" | "updatedAt", ExtArgs["result"]["sprint"]>
  export type SprintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workItemAssignments?: boolean | Sprint$workItemAssignmentsArgs<ExtArgs>
    _count?: boolean | SprintCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SprintIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SprintIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SprintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sprint"
    objects: {
      workItemAssignments: Prisma.$SprintWorkItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      startDate: Date
      endDate: Date
      plannedVelocity: number
      actualVelocity: number | null
      archived: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sprint"]>
    composites: {}
  }

  type SprintGetPayload<S extends boolean | null | undefined | SprintDefaultArgs> = $Result.GetResult<Prisma.$SprintPayload, S>

  type SprintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SprintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SprintCountAggregateInputType | true
    }

  export interface SprintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sprint'], meta: { name: 'Sprint' } }
    /**
     * Find zero or one Sprint that matches the filter.
     * @param {SprintFindUniqueArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SprintFindUniqueArgs>(args: SelectSubset<T, SprintFindUniqueArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sprint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SprintFindUniqueOrThrowArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SprintFindUniqueOrThrowArgs>(args: SelectSubset<T, SprintFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindFirstArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SprintFindFirstArgs>(args?: SelectSubset<T, SprintFindFirstArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sprint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindFirstOrThrowArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SprintFindFirstOrThrowArgs>(args?: SelectSubset<T, SprintFindFirstOrThrowArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sprints
     * const sprints = await prisma.sprint.findMany()
     * 
     * // Get first 10 Sprints
     * const sprints = await prisma.sprint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sprintWithIdOnly = await prisma.sprint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SprintFindManyArgs>(args?: SelectSubset<T, SprintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sprint.
     * @param {SprintCreateArgs} args - Arguments to create a Sprint.
     * @example
     * // Create one Sprint
     * const Sprint = await prisma.sprint.create({
     *   data: {
     *     // ... data to create a Sprint
     *   }
     * })
     * 
     */
    create<T extends SprintCreateArgs>(args: SelectSubset<T, SprintCreateArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sprints.
     * @param {SprintCreateManyArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprint = await prisma.sprint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SprintCreateManyArgs>(args?: SelectSubset<T, SprintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sprints and returns the data saved in the database.
     * @param {SprintCreateManyAndReturnArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprint = await prisma.sprint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sprints and only return the `id`
     * const sprintWithIdOnly = await prisma.sprint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SprintCreateManyAndReturnArgs>(args?: SelectSubset<T, SprintCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sprint.
     * @param {SprintDeleteArgs} args - Arguments to delete one Sprint.
     * @example
     * // Delete one Sprint
     * const Sprint = await prisma.sprint.delete({
     *   where: {
     *     // ... filter to delete one Sprint
     *   }
     * })
     * 
     */
    delete<T extends SprintDeleteArgs>(args: SelectSubset<T, SprintDeleteArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sprint.
     * @param {SprintUpdateArgs} args - Arguments to update one Sprint.
     * @example
     * // Update one Sprint
     * const sprint = await prisma.sprint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SprintUpdateArgs>(args: SelectSubset<T, SprintUpdateArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sprints.
     * @param {SprintDeleteManyArgs} args - Arguments to filter Sprints to delete.
     * @example
     * // Delete a few Sprints
     * const { count } = await prisma.sprint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SprintDeleteManyArgs>(args?: SelectSubset<T, SprintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sprints
     * const sprint = await prisma.sprint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SprintUpdateManyArgs>(args: SelectSubset<T, SprintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints and returns the data updated in the database.
     * @param {SprintUpdateManyAndReturnArgs} args - Arguments to update many Sprints.
     * @example
     * // Update many Sprints
     * const sprint = await prisma.sprint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sprints and only return the `id`
     * const sprintWithIdOnly = await prisma.sprint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SprintUpdateManyAndReturnArgs>(args: SelectSubset<T, SprintUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sprint.
     * @param {SprintUpsertArgs} args - Arguments to update or create a Sprint.
     * @example
     * // Update or create a Sprint
     * const sprint = await prisma.sprint.upsert({
     *   create: {
     *     // ... data to create a Sprint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sprint we want to update
     *   }
     * })
     */
    upsert<T extends SprintUpsertArgs>(args: SelectSubset<T, SprintUpsertArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintCountArgs} args - Arguments to filter Sprints to count.
     * @example
     * // Count the number of Sprints
     * const count = await prisma.sprint.count({
     *   where: {
     *     // ... the filter for the Sprints we want to count
     *   }
     * })
    **/
    count<T extends SprintCountArgs>(
      args?: Subset<T, SprintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SprintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SprintAggregateArgs>(args: Subset<T, SprintAggregateArgs>): Prisma.PrismaPromise<GetSprintAggregateType<T>>

    /**
     * Group by Sprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SprintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SprintGroupByArgs['orderBy'] }
        : { orderBy?: SprintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SprintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sprint model
   */
  readonly fields: SprintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sprint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SprintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workItemAssignments<T extends Sprint$workItemAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Sprint$workItemAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sprint model
   */
  interface SprintFieldRefs {
    readonly id: FieldRef<"Sprint", 'String'>
    readonly name: FieldRef<"Sprint", 'String'>
    readonly startDate: FieldRef<"Sprint", 'DateTime'>
    readonly endDate: FieldRef<"Sprint", 'DateTime'>
    readonly plannedVelocity: FieldRef<"Sprint", 'Float'>
    readonly actualVelocity: FieldRef<"Sprint", 'Float'>
    readonly archived: FieldRef<"Sprint", 'Boolean'>
    readonly createdAt: FieldRef<"Sprint", 'DateTime'>
    readonly updatedAt: FieldRef<"Sprint", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sprint findUnique
   */
  export type SprintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint findUniqueOrThrow
   */
  export type SprintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint findFirst
   */
  export type SprintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Sprint findFirstOrThrow
   */
  export type SprintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Sprint findMany
   */
  export type SprintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sprints.
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Sprint create
   */
  export type SprintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * The data needed to create a Sprint.
     */
    data: XOR<SprintCreateInput, SprintUncheckedCreateInput>
  }

  /**
   * Sprint createMany
   */
  export type SprintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sprints.
     */
    data: SprintCreateManyInput | SprintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sprint createManyAndReturn
   */
  export type SprintCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * The data used to create many Sprints.
     */
    data: SprintCreateManyInput | SprintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sprint update
   */
  export type SprintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * The data needed to update a Sprint.
     */
    data: XOR<SprintUpdateInput, SprintUncheckedUpdateInput>
    /**
     * Choose, which Sprint to update.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint updateMany
   */
  export type SprintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyInput>
    /**
     * Filter which Sprints to update
     */
    where?: SprintWhereInput
    /**
     * Limit how many Sprints to update.
     */
    limit?: number
  }

  /**
   * Sprint updateManyAndReturn
   */
  export type SprintUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyInput>
    /**
     * Filter which Sprints to update
     */
    where?: SprintWhereInput
    /**
     * Limit how many Sprints to update.
     */
    limit?: number
  }

  /**
   * Sprint upsert
   */
  export type SprintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * The filter to search for the Sprint to update in case it exists.
     */
    where: SprintWhereUniqueInput
    /**
     * In case the Sprint found by the `where` argument doesn't exist, create a new Sprint with this data.
     */
    create: XOR<SprintCreateInput, SprintUncheckedCreateInput>
    /**
     * In case the Sprint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SprintUpdateInput, SprintUncheckedUpdateInput>
  }

  /**
   * Sprint delete
   */
  export type SprintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter which Sprint to delete.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint deleteMany
   */
  export type SprintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sprints to delete
     */
    where?: SprintWhereInput
    /**
     * Limit how many Sprints to delete.
     */
    limit?: number
  }

  /**
   * Sprint.workItemAssignments
   */
  export type Sprint$workItemAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    where?: SprintWorkItemWhereInput
    orderBy?: SprintWorkItemOrderByWithRelationInput | SprintWorkItemOrderByWithRelationInput[]
    cursor?: SprintWorkItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintWorkItemScalarFieldEnum | SprintWorkItemScalarFieldEnum[]
  }

  /**
   * Sprint without action
   */
  export type SprintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
  }


  /**
   * Model SprintWorkItem
   */

  export type AggregateSprintWorkItem = {
    _count: SprintWorkItemCountAggregateOutputType | null
    _min: SprintWorkItemMinAggregateOutputType | null
    _max: SprintWorkItemMaxAggregateOutputType | null
  }

  export type SprintWorkItemMinAggregateOutputType = {
    sprintId: string | null
    workItemId: string | null
    assignedAt: Date | null
  }

  export type SprintWorkItemMaxAggregateOutputType = {
    sprintId: string | null
    workItemId: string | null
    assignedAt: Date | null
  }

  export type SprintWorkItemCountAggregateOutputType = {
    sprintId: number
    workItemId: number
    assignedAt: number
    _all: number
  }


  export type SprintWorkItemMinAggregateInputType = {
    sprintId?: true
    workItemId?: true
    assignedAt?: true
  }

  export type SprintWorkItemMaxAggregateInputType = {
    sprintId?: true
    workItemId?: true
    assignedAt?: true
  }

  export type SprintWorkItemCountAggregateInputType = {
    sprintId?: true
    workItemId?: true
    assignedAt?: true
    _all?: true
  }

  export type SprintWorkItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SprintWorkItem to aggregate.
     */
    where?: SprintWorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintWorkItems to fetch.
     */
    orderBy?: SprintWorkItemOrderByWithRelationInput | SprintWorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SprintWorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintWorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintWorkItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SprintWorkItems
    **/
    _count?: true | SprintWorkItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SprintWorkItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SprintWorkItemMaxAggregateInputType
  }

  export type GetSprintWorkItemAggregateType<T extends SprintWorkItemAggregateArgs> = {
        [P in keyof T & keyof AggregateSprintWorkItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprintWorkItem[P]>
      : GetScalarType<T[P], AggregateSprintWorkItem[P]>
  }




  export type SprintWorkItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintWorkItemWhereInput
    orderBy?: SprintWorkItemOrderByWithAggregationInput | SprintWorkItemOrderByWithAggregationInput[]
    by: SprintWorkItemScalarFieldEnum[] | SprintWorkItemScalarFieldEnum
    having?: SprintWorkItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SprintWorkItemCountAggregateInputType | true
    _min?: SprintWorkItemMinAggregateInputType
    _max?: SprintWorkItemMaxAggregateInputType
  }

  export type SprintWorkItemGroupByOutputType = {
    sprintId: string
    workItemId: string
    assignedAt: Date
    _count: SprintWorkItemCountAggregateOutputType | null
    _min: SprintWorkItemMinAggregateOutputType | null
    _max: SprintWorkItemMaxAggregateOutputType | null
  }

  type GetSprintWorkItemGroupByPayload<T extends SprintWorkItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SprintWorkItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SprintWorkItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintWorkItemGroupByOutputType[P]>
            : GetScalarType<T[P], SprintWorkItemGroupByOutputType[P]>
        }
      >
    >


  export type SprintWorkItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sprintId?: boolean
    workItemId?: boolean
    assignedAt?: boolean
    sprint?: boolean | SprintDefaultArgs<ExtArgs>
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprintWorkItem"]>

  export type SprintWorkItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sprintId?: boolean
    workItemId?: boolean
    assignedAt?: boolean
    sprint?: boolean | SprintDefaultArgs<ExtArgs>
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprintWorkItem"]>

  export type SprintWorkItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sprintId?: boolean
    workItemId?: boolean
    assignedAt?: boolean
    sprint?: boolean | SprintDefaultArgs<ExtArgs>
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprintWorkItem"]>

  export type SprintWorkItemSelectScalar = {
    sprintId?: boolean
    workItemId?: boolean
    assignedAt?: boolean
  }

  export type SprintWorkItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sprintId" | "workItemId" | "assignedAt", ExtArgs["result"]["sprintWorkItem"]>
  export type SprintWorkItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint?: boolean | SprintDefaultArgs<ExtArgs>
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
  }
  export type SprintWorkItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint?: boolean | SprintDefaultArgs<ExtArgs>
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
  }
  export type SprintWorkItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sprint?: boolean | SprintDefaultArgs<ExtArgs>
    workItem?: boolean | WorkItemDefaultArgs<ExtArgs>
  }

  export type $SprintWorkItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SprintWorkItem"
    objects: {
      sprint: Prisma.$SprintPayload<ExtArgs>
      workItem: Prisma.$WorkItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sprintId: string
      workItemId: string
      assignedAt: Date
    }, ExtArgs["result"]["sprintWorkItem"]>
    composites: {}
  }

  type SprintWorkItemGetPayload<S extends boolean | null | undefined | SprintWorkItemDefaultArgs> = $Result.GetResult<Prisma.$SprintWorkItemPayload, S>

  type SprintWorkItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SprintWorkItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SprintWorkItemCountAggregateInputType | true
    }

  export interface SprintWorkItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SprintWorkItem'], meta: { name: 'SprintWorkItem' } }
    /**
     * Find zero or one SprintWorkItem that matches the filter.
     * @param {SprintWorkItemFindUniqueArgs} args - Arguments to find a SprintWorkItem
     * @example
     * // Get one SprintWorkItem
     * const sprintWorkItem = await prisma.sprintWorkItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SprintWorkItemFindUniqueArgs>(args: SelectSubset<T, SprintWorkItemFindUniqueArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SprintWorkItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SprintWorkItemFindUniqueOrThrowArgs} args - Arguments to find a SprintWorkItem
     * @example
     * // Get one SprintWorkItem
     * const sprintWorkItem = await prisma.sprintWorkItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SprintWorkItemFindUniqueOrThrowArgs>(args: SelectSubset<T, SprintWorkItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SprintWorkItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemFindFirstArgs} args - Arguments to find a SprintWorkItem
     * @example
     * // Get one SprintWorkItem
     * const sprintWorkItem = await prisma.sprintWorkItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SprintWorkItemFindFirstArgs>(args?: SelectSubset<T, SprintWorkItemFindFirstArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SprintWorkItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemFindFirstOrThrowArgs} args - Arguments to find a SprintWorkItem
     * @example
     * // Get one SprintWorkItem
     * const sprintWorkItem = await prisma.sprintWorkItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SprintWorkItemFindFirstOrThrowArgs>(args?: SelectSubset<T, SprintWorkItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SprintWorkItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SprintWorkItems
     * const sprintWorkItems = await prisma.sprintWorkItem.findMany()
     * 
     * // Get first 10 SprintWorkItems
     * const sprintWorkItems = await prisma.sprintWorkItem.findMany({ take: 10 })
     * 
     * // Only select the `sprintId`
     * const sprintWorkItemWithSprintIdOnly = await prisma.sprintWorkItem.findMany({ select: { sprintId: true } })
     * 
     */
    findMany<T extends SprintWorkItemFindManyArgs>(args?: SelectSubset<T, SprintWorkItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SprintWorkItem.
     * @param {SprintWorkItemCreateArgs} args - Arguments to create a SprintWorkItem.
     * @example
     * // Create one SprintWorkItem
     * const SprintWorkItem = await prisma.sprintWorkItem.create({
     *   data: {
     *     // ... data to create a SprintWorkItem
     *   }
     * })
     * 
     */
    create<T extends SprintWorkItemCreateArgs>(args: SelectSubset<T, SprintWorkItemCreateArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SprintWorkItems.
     * @param {SprintWorkItemCreateManyArgs} args - Arguments to create many SprintWorkItems.
     * @example
     * // Create many SprintWorkItems
     * const sprintWorkItem = await prisma.sprintWorkItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SprintWorkItemCreateManyArgs>(args?: SelectSubset<T, SprintWorkItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SprintWorkItems and returns the data saved in the database.
     * @param {SprintWorkItemCreateManyAndReturnArgs} args - Arguments to create many SprintWorkItems.
     * @example
     * // Create many SprintWorkItems
     * const sprintWorkItem = await prisma.sprintWorkItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SprintWorkItems and only return the `sprintId`
     * const sprintWorkItemWithSprintIdOnly = await prisma.sprintWorkItem.createManyAndReturn({
     *   select: { sprintId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SprintWorkItemCreateManyAndReturnArgs>(args?: SelectSubset<T, SprintWorkItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SprintWorkItem.
     * @param {SprintWorkItemDeleteArgs} args - Arguments to delete one SprintWorkItem.
     * @example
     * // Delete one SprintWorkItem
     * const SprintWorkItem = await prisma.sprintWorkItem.delete({
     *   where: {
     *     // ... filter to delete one SprintWorkItem
     *   }
     * })
     * 
     */
    delete<T extends SprintWorkItemDeleteArgs>(args: SelectSubset<T, SprintWorkItemDeleteArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SprintWorkItem.
     * @param {SprintWorkItemUpdateArgs} args - Arguments to update one SprintWorkItem.
     * @example
     * // Update one SprintWorkItem
     * const sprintWorkItem = await prisma.sprintWorkItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SprintWorkItemUpdateArgs>(args: SelectSubset<T, SprintWorkItemUpdateArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SprintWorkItems.
     * @param {SprintWorkItemDeleteManyArgs} args - Arguments to filter SprintWorkItems to delete.
     * @example
     * // Delete a few SprintWorkItems
     * const { count } = await prisma.sprintWorkItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SprintWorkItemDeleteManyArgs>(args?: SelectSubset<T, SprintWorkItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SprintWorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SprintWorkItems
     * const sprintWorkItem = await prisma.sprintWorkItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SprintWorkItemUpdateManyArgs>(args: SelectSubset<T, SprintWorkItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SprintWorkItems and returns the data updated in the database.
     * @param {SprintWorkItemUpdateManyAndReturnArgs} args - Arguments to update many SprintWorkItems.
     * @example
     * // Update many SprintWorkItems
     * const sprintWorkItem = await prisma.sprintWorkItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SprintWorkItems and only return the `sprintId`
     * const sprintWorkItemWithSprintIdOnly = await prisma.sprintWorkItem.updateManyAndReturn({
     *   select: { sprintId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SprintWorkItemUpdateManyAndReturnArgs>(args: SelectSubset<T, SprintWorkItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SprintWorkItem.
     * @param {SprintWorkItemUpsertArgs} args - Arguments to update or create a SprintWorkItem.
     * @example
     * // Update or create a SprintWorkItem
     * const sprintWorkItem = await prisma.sprintWorkItem.upsert({
     *   create: {
     *     // ... data to create a SprintWorkItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SprintWorkItem we want to update
     *   }
     * })
     */
    upsert<T extends SprintWorkItemUpsertArgs>(args: SelectSubset<T, SprintWorkItemUpsertArgs<ExtArgs>>): Prisma__SprintWorkItemClient<$Result.GetResult<Prisma.$SprintWorkItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SprintWorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemCountArgs} args - Arguments to filter SprintWorkItems to count.
     * @example
     * // Count the number of SprintWorkItems
     * const count = await prisma.sprintWorkItem.count({
     *   where: {
     *     // ... the filter for the SprintWorkItems we want to count
     *   }
     * })
    **/
    count<T extends SprintWorkItemCountArgs>(
      args?: Subset<T, SprintWorkItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SprintWorkItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SprintWorkItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SprintWorkItemAggregateArgs>(args: Subset<T, SprintWorkItemAggregateArgs>): Prisma.PrismaPromise<GetSprintWorkItemAggregateType<T>>

    /**
     * Group by SprintWorkItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintWorkItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SprintWorkItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SprintWorkItemGroupByArgs['orderBy'] }
        : { orderBy?: SprintWorkItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SprintWorkItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprintWorkItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SprintWorkItem model
   */
  readonly fields: SprintWorkItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SprintWorkItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SprintWorkItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sprint<T extends SprintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SprintDefaultArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workItem<T extends WorkItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkItemDefaultArgs<ExtArgs>>): Prisma__WorkItemClient<$Result.GetResult<Prisma.$WorkItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SprintWorkItem model
   */
  interface SprintWorkItemFieldRefs {
    readonly sprintId: FieldRef<"SprintWorkItem", 'String'>
    readonly workItemId: FieldRef<"SprintWorkItem", 'String'>
    readonly assignedAt: FieldRef<"SprintWorkItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SprintWorkItem findUnique
   */
  export type SprintWorkItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * Filter, which SprintWorkItem to fetch.
     */
    where: SprintWorkItemWhereUniqueInput
  }

  /**
   * SprintWorkItem findUniqueOrThrow
   */
  export type SprintWorkItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * Filter, which SprintWorkItem to fetch.
     */
    where: SprintWorkItemWhereUniqueInput
  }

  /**
   * SprintWorkItem findFirst
   */
  export type SprintWorkItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * Filter, which SprintWorkItem to fetch.
     */
    where?: SprintWorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintWorkItems to fetch.
     */
    orderBy?: SprintWorkItemOrderByWithRelationInput | SprintWorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SprintWorkItems.
     */
    cursor?: SprintWorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintWorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintWorkItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SprintWorkItems.
     */
    distinct?: SprintWorkItemScalarFieldEnum | SprintWorkItemScalarFieldEnum[]
  }

  /**
   * SprintWorkItem findFirstOrThrow
   */
  export type SprintWorkItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * Filter, which SprintWorkItem to fetch.
     */
    where?: SprintWorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintWorkItems to fetch.
     */
    orderBy?: SprintWorkItemOrderByWithRelationInput | SprintWorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SprintWorkItems.
     */
    cursor?: SprintWorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintWorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintWorkItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SprintWorkItems.
     */
    distinct?: SprintWorkItemScalarFieldEnum | SprintWorkItemScalarFieldEnum[]
  }

  /**
   * SprintWorkItem findMany
   */
  export type SprintWorkItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * Filter, which SprintWorkItems to fetch.
     */
    where?: SprintWorkItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintWorkItems to fetch.
     */
    orderBy?: SprintWorkItemOrderByWithRelationInput | SprintWorkItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SprintWorkItems.
     */
    cursor?: SprintWorkItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintWorkItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintWorkItems.
     */
    skip?: number
    distinct?: SprintWorkItemScalarFieldEnum | SprintWorkItemScalarFieldEnum[]
  }

  /**
   * SprintWorkItem create
   */
  export type SprintWorkItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * The data needed to create a SprintWorkItem.
     */
    data: XOR<SprintWorkItemCreateInput, SprintWorkItemUncheckedCreateInput>
  }

  /**
   * SprintWorkItem createMany
   */
  export type SprintWorkItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SprintWorkItems.
     */
    data: SprintWorkItemCreateManyInput | SprintWorkItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SprintWorkItem createManyAndReturn
   */
  export type SprintWorkItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * The data used to create many SprintWorkItems.
     */
    data: SprintWorkItemCreateManyInput | SprintWorkItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SprintWorkItem update
   */
  export type SprintWorkItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * The data needed to update a SprintWorkItem.
     */
    data: XOR<SprintWorkItemUpdateInput, SprintWorkItemUncheckedUpdateInput>
    /**
     * Choose, which SprintWorkItem to update.
     */
    where: SprintWorkItemWhereUniqueInput
  }

  /**
   * SprintWorkItem updateMany
   */
  export type SprintWorkItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SprintWorkItems.
     */
    data: XOR<SprintWorkItemUpdateManyMutationInput, SprintWorkItemUncheckedUpdateManyInput>
    /**
     * Filter which SprintWorkItems to update
     */
    where?: SprintWorkItemWhereInput
    /**
     * Limit how many SprintWorkItems to update.
     */
    limit?: number
  }

  /**
   * SprintWorkItem updateManyAndReturn
   */
  export type SprintWorkItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * The data used to update SprintWorkItems.
     */
    data: XOR<SprintWorkItemUpdateManyMutationInput, SprintWorkItemUncheckedUpdateManyInput>
    /**
     * Filter which SprintWorkItems to update
     */
    where?: SprintWorkItemWhereInput
    /**
     * Limit how many SprintWorkItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SprintWorkItem upsert
   */
  export type SprintWorkItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * The filter to search for the SprintWorkItem to update in case it exists.
     */
    where: SprintWorkItemWhereUniqueInput
    /**
     * In case the SprintWorkItem found by the `where` argument doesn't exist, create a new SprintWorkItem with this data.
     */
    create: XOR<SprintWorkItemCreateInput, SprintWorkItemUncheckedCreateInput>
    /**
     * In case the SprintWorkItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SprintWorkItemUpdateInput, SprintWorkItemUncheckedUpdateInput>
  }

  /**
   * SprintWorkItem delete
   */
  export type SprintWorkItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
    /**
     * Filter which SprintWorkItem to delete.
     */
    where: SprintWorkItemWhereUniqueInput
  }

  /**
   * SprintWorkItem deleteMany
   */
  export type SprintWorkItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SprintWorkItems to delete
     */
    where?: SprintWorkItemWhereInput
    /**
     * Limit how many SprintWorkItems to delete.
     */
    limit?: number
  }

  /**
   * SprintWorkItem without action
   */
  export type SprintWorkItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintWorkItem
     */
    select?: SprintWorkItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintWorkItem
     */
    omit?: SprintWorkItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintWorkItemInclude<ExtArgs> | null
  }


  /**
   * Model PersonalHoliday
   */

  export type AggregatePersonalHoliday = {
    _count: PersonalHolidayCountAggregateOutputType | null
    _min: PersonalHolidayMinAggregateOutputType | null
    _max: PersonalHolidayMaxAggregateOutputType | null
  }

  export type PersonalHolidayMinAggregateOutputType = {
    id: string | null
    teamMemberId: string | null
    startDate: Date | null
    endDate: Date | null
    description: string | null
    createdAt: Date | null
  }

  export type PersonalHolidayMaxAggregateOutputType = {
    id: string | null
    teamMemberId: string | null
    startDate: Date | null
    endDate: Date | null
    description: string | null
    createdAt: Date | null
  }

  export type PersonalHolidayCountAggregateOutputType = {
    id: number
    teamMemberId: number
    startDate: number
    endDate: number
    description: number
    createdAt: number
    _all: number
  }


  export type PersonalHolidayMinAggregateInputType = {
    id?: true
    teamMemberId?: true
    startDate?: true
    endDate?: true
    description?: true
    createdAt?: true
  }

  export type PersonalHolidayMaxAggregateInputType = {
    id?: true
    teamMemberId?: true
    startDate?: true
    endDate?: true
    description?: true
    createdAt?: true
  }

  export type PersonalHolidayCountAggregateInputType = {
    id?: true
    teamMemberId?: true
    startDate?: true
    endDate?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type PersonalHolidayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalHoliday to aggregate.
     */
    where?: PersonalHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalHolidays to fetch.
     */
    orderBy?: PersonalHolidayOrderByWithRelationInput | PersonalHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalHolidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalHolidays
    **/
    _count?: true | PersonalHolidayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalHolidayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalHolidayMaxAggregateInputType
  }

  export type GetPersonalHolidayAggregateType<T extends PersonalHolidayAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalHoliday]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalHoliday[P]>
      : GetScalarType<T[P], AggregatePersonalHoliday[P]>
  }




  export type PersonalHolidayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalHolidayWhereInput
    orderBy?: PersonalHolidayOrderByWithAggregationInput | PersonalHolidayOrderByWithAggregationInput[]
    by: PersonalHolidayScalarFieldEnum[] | PersonalHolidayScalarFieldEnum
    having?: PersonalHolidayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalHolidayCountAggregateInputType | true
    _min?: PersonalHolidayMinAggregateInputType
    _max?: PersonalHolidayMaxAggregateInputType
  }

  export type PersonalHolidayGroupByOutputType = {
    id: string
    teamMemberId: string
    startDate: Date
    endDate: Date
    description: string | null
    createdAt: Date
    _count: PersonalHolidayCountAggregateOutputType | null
    _min: PersonalHolidayMinAggregateOutputType | null
    _max: PersonalHolidayMaxAggregateOutputType | null
  }

  type GetPersonalHolidayGroupByPayload<T extends PersonalHolidayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalHolidayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalHolidayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalHolidayGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalHolidayGroupByOutputType[P]>
        }
      >
    >


  export type PersonalHolidaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamMemberId?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    createdAt?: boolean
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalHoliday"]>

  export type PersonalHolidaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamMemberId?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    createdAt?: boolean
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalHoliday"]>

  export type PersonalHolidaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamMemberId?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    createdAt?: boolean
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalHoliday"]>

  export type PersonalHolidaySelectScalar = {
    id?: boolean
    teamMemberId?: boolean
    startDate?: boolean
    endDate?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type PersonalHolidayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamMemberId" | "startDate" | "endDate" | "description" | "createdAt", ExtArgs["result"]["personalHoliday"]>
  export type PersonalHolidayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
  }
  export type PersonalHolidayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
  }
  export type PersonalHolidayIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
  }

  export type $PersonalHolidayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonalHoliday"
    objects: {
      teamMember: Prisma.$TeamMemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamMemberId: string
      startDate: Date
      endDate: Date
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["personalHoliday"]>
    composites: {}
  }

  type PersonalHolidayGetPayload<S extends boolean | null | undefined | PersonalHolidayDefaultArgs> = $Result.GetResult<Prisma.$PersonalHolidayPayload, S>

  type PersonalHolidayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonalHolidayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonalHolidayCountAggregateInputType | true
    }

  export interface PersonalHolidayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonalHoliday'], meta: { name: 'PersonalHoliday' } }
    /**
     * Find zero or one PersonalHoliday that matches the filter.
     * @param {PersonalHolidayFindUniqueArgs} args - Arguments to find a PersonalHoliday
     * @example
     * // Get one PersonalHoliday
     * const personalHoliday = await prisma.personalHoliday.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonalHolidayFindUniqueArgs>(args: SelectSubset<T, PersonalHolidayFindUniqueArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PersonalHoliday that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonalHolidayFindUniqueOrThrowArgs} args - Arguments to find a PersonalHoliday
     * @example
     * // Get one PersonalHoliday
     * const personalHoliday = await prisma.personalHoliday.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonalHolidayFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonalHolidayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonalHoliday that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayFindFirstArgs} args - Arguments to find a PersonalHoliday
     * @example
     * // Get one PersonalHoliday
     * const personalHoliday = await prisma.personalHoliday.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonalHolidayFindFirstArgs>(args?: SelectSubset<T, PersonalHolidayFindFirstArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonalHoliday that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayFindFirstOrThrowArgs} args - Arguments to find a PersonalHoliday
     * @example
     * // Get one PersonalHoliday
     * const personalHoliday = await prisma.personalHoliday.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonalHolidayFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonalHolidayFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PersonalHolidays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalHolidays
     * const personalHolidays = await prisma.personalHoliday.findMany()
     * 
     * // Get first 10 PersonalHolidays
     * const personalHolidays = await prisma.personalHoliday.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalHolidayWithIdOnly = await prisma.personalHoliday.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonalHolidayFindManyArgs>(args?: SelectSubset<T, PersonalHolidayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PersonalHoliday.
     * @param {PersonalHolidayCreateArgs} args - Arguments to create a PersonalHoliday.
     * @example
     * // Create one PersonalHoliday
     * const PersonalHoliday = await prisma.personalHoliday.create({
     *   data: {
     *     // ... data to create a PersonalHoliday
     *   }
     * })
     * 
     */
    create<T extends PersonalHolidayCreateArgs>(args: SelectSubset<T, PersonalHolidayCreateArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PersonalHolidays.
     * @param {PersonalHolidayCreateManyArgs} args - Arguments to create many PersonalHolidays.
     * @example
     * // Create many PersonalHolidays
     * const personalHoliday = await prisma.personalHoliday.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonalHolidayCreateManyArgs>(args?: SelectSubset<T, PersonalHolidayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PersonalHolidays and returns the data saved in the database.
     * @param {PersonalHolidayCreateManyAndReturnArgs} args - Arguments to create many PersonalHolidays.
     * @example
     * // Create many PersonalHolidays
     * const personalHoliday = await prisma.personalHoliday.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PersonalHolidays and only return the `id`
     * const personalHolidayWithIdOnly = await prisma.personalHoliday.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonalHolidayCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonalHolidayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PersonalHoliday.
     * @param {PersonalHolidayDeleteArgs} args - Arguments to delete one PersonalHoliday.
     * @example
     * // Delete one PersonalHoliday
     * const PersonalHoliday = await prisma.personalHoliday.delete({
     *   where: {
     *     // ... filter to delete one PersonalHoliday
     *   }
     * })
     * 
     */
    delete<T extends PersonalHolidayDeleteArgs>(args: SelectSubset<T, PersonalHolidayDeleteArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PersonalHoliday.
     * @param {PersonalHolidayUpdateArgs} args - Arguments to update one PersonalHoliday.
     * @example
     * // Update one PersonalHoliday
     * const personalHoliday = await prisma.personalHoliday.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonalHolidayUpdateArgs>(args: SelectSubset<T, PersonalHolidayUpdateArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PersonalHolidays.
     * @param {PersonalHolidayDeleteManyArgs} args - Arguments to filter PersonalHolidays to delete.
     * @example
     * // Delete a few PersonalHolidays
     * const { count } = await prisma.personalHoliday.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonalHolidayDeleteManyArgs>(args?: SelectSubset<T, PersonalHolidayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalHolidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalHolidays
     * const personalHoliday = await prisma.personalHoliday.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonalHolidayUpdateManyArgs>(args: SelectSubset<T, PersonalHolidayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalHolidays and returns the data updated in the database.
     * @param {PersonalHolidayUpdateManyAndReturnArgs} args - Arguments to update many PersonalHolidays.
     * @example
     * // Update many PersonalHolidays
     * const personalHoliday = await prisma.personalHoliday.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PersonalHolidays and only return the `id`
     * const personalHolidayWithIdOnly = await prisma.personalHoliday.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonalHolidayUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonalHolidayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PersonalHoliday.
     * @param {PersonalHolidayUpsertArgs} args - Arguments to update or create a PersonalHoliday.
     * @example
     * // Update or create a PersonalHoliday
     * const personalHoliday = await prisma.personalHoliday.upsert({
     *   create: {
     *     // ... data to create a PersonalHoliday
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalHoliday we want to update
     *   }
     * })
     */
    upsert<T extends PersonalHolidayUpsertArgs>(args: SelectSubset<T, PersonalHolidayUpsertArgs<ExtArgs>>): Prisma__PersonalHolidayClient<$Result.GetResult<Prisma.$PersonalHolidayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PersonalHolidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayCountArgs} args - Arguments to filter PersonalHolidays to count.
     * @example
     * // Count the number of PersonalHolidays
     * const count = await prisma.personalHoliday.count({
     *   where: {
     *     // ... the filter for the PersonalHolidays we want to count
     *   }
     * })
    **/
    count<T extends PersonalHolidayCountArgs>(
      args?: Subset<T, PersonalHolidayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalHolidayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalHoliday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalHolidayAggregateArgs>(args: Subset<T, PersonalHolidayAggregateArgs>): Prisma.PrismaPromise<GetPersonalHolidayAggregateType<T>>

    /**
     * Group by PersonalHoliday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalHolidayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalHolidayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalHolidayGroupByArgs['orderBy'] }
        : { orderBy?: PersonalHolidayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalHolidayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalHolidayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonalHoliday model
   */
  readonly fields: PersonalHolidayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalHoliday.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalHolidayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teamMember<T extends TeamMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamMemberDefaultArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PersonalHoliday model
   */
  interface PersonalHolidayFieldRefs {
    readonly id: FieldRef<"PersonalHoliday", 'String'>
    readonly teamMemberId: FieldRef<"PersonalHoliday", 'String'>
    readonly startDate: FieldRef<"PersonalHoliday", 'DateTime'>
    readonly endDate: FieldRef<"PersonalHoliday", 'DateTime'>
    readonly description: FieldRef<"PersonalHoliday", 'String'>
    readonly createdAt: FieldRef<"PersonalHoliday", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PersonalHoliday findUnique
   */
  export type PersonalHolidayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * Filter, which PersonalHoliday to fetch.
     */
    where: PersonalHolidayWhereUniqueInput
  }

  /**
   * PersonalHoliday findUniqueOrThrow
   */
  export type PersonalHolidayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * Filter, which PersonalHoliday to fetch.
     */
    where: PersonalHolidayWhereUniqueInput
  }

  /**
   * PersonalHoliday findFirst
   */
  export type PersonalHolidayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * Filter, which PersonalHoliday to fetch.
     */
    where?: PersonalHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalHolidays to fetch.
     */
    orderBy?: PersonalHolidayOrderByWithRelationInput | PersonalHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalHolidays.
     */
    cursor?: PersonalHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalHolidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalHolidays.
     */
    distinct?: PersonalHolidayScalarFieldEnum | PersonalHolidayScalarFieldEnum[]
  }

  /**
   * PersonalHoliday findFirstOrThrow
   */
  export type PersonalHolidayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * Filter, which PersonalHoliday to fetch.
     */
    where?: PersonalHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalHolidays to fetch.
     */
    orderBy?: PersonalHolidayOrderByWithRelationInput | PersonalHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalHolidays.
     */
    cursor?: PersonalHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalHolidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalHolidays.
     */
    distinct?: PersonalHolidayScalarFieldEnum | PersonalHolidayScalarFieldEnum[]
  }

  /**
   * PersonalHoliday findMany
   */
  export type PersonalHolidayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * Filter, which PersonalHolidays to fetch.
     */
    where?: PersonalHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalHolidays to fetch.
     */
    orderBy?: PersonalHolidayOrderByWithRelationInput | PersonalHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalHolidays.
     */
    cursor?: PersonalHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalHolidays.
     */
    skip?: number
    distinct?: PersonalHolidayScalarFieldEnum | PersonalHolidayScalarFieldEnum[]
  }

  /**
   * PersonalHoliday create
   */
  export type PersonalHolidayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonalHoliday.
     */
    data: XOR<PersonalHolidayCreateInput, PersonalHolidayUncheckedCreateInput>
  }

  /**
   * PersonalHoliday createMany
   */
  export type PersonalHolidayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonalHolidays.
     */
    data: PersonalHolidayCreateManyInput | PersonalHolidayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PersonalHoliday createManyAndReturn
   */
  export type PersonalHolidayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * The data used to create many PersonalHolidays.
     */
    data: PersonalHolidayCreateManyInput | PersonalHolidayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalHoliday update
   */
  export type PersonalHolidayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonalHoliday.
     */
    data: XOR<PersonalHolidayUpdateInput, PersonalHolidayUncheckedUpdateInput>
    /**
     * Choose, which PersonalHoliday to update.
     */
    where: PersonalHolidayWhereUniqueInput
  }

  /**
   * PersonalHoliday updateMany
   */
  export type PersonalHolidayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonalHolidays.
     */
    data: XOR<PersonalHolidayUpdateManyMutationInput, PersonalHolidayUncheckedUpdateManyInput>
    /**
     * Filter which PersonalHolidays to update
     */
    where?: PersonalHolidayWhereInput
    /**
     * Limit how many PersonalHolidays to update.
     */
    limit?: number
  }

  /**
   * PersonalHoliday updateManyAndReturn
   */
  export type PersonalHolidayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * The data used to update PersonalHolidays.
     */
    data: XOR<PersonalHolidayUpdateManyMutationInput, PersonalHolidayUncheckedUpdateManyInput>
    /**
     * Filter which PersonalHolidays to update
     */
    where?: PersonalHolidayWhereInput
    /**
     * Limit how many PersonalHolidays to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalHoliday upsert
   */
  export type PersonalHolidayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonalHoliday to update in case it exists.
     */
    where: PersonalHolidayWhereUniqueInput
    /**
     * In case the PersonalHoliday found by the `where` argument doesn't exist, create a new PersonalHoliday with this data.
     */
    create: XOR<PersonalHolidayCreateInput, PersonalHolidayUncheckedCreateInput>
    /**
     * In case the PersonalHoliday was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalHolidayUpdateInput, PersonalHolidayUncheckedUpdateInput>
  }

  /**
   * PersonalHoliday delete
   */
  export type PersonalHolidayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
    /**
     * Filter which PersonalHoliday to delete.
     */
    where: PersonalHolidayWhereUniqueInput
  }

  /**
   * PersonalHoliday deleteMany
   */
  export type PersonalHolidayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalHolidays to delete
     */
    where?: PersonalHolidayWhereInput
    /**
     * Limit how many PersonalHolidays to delete.
     */
    limit?: number
  }

  /**
   * PersonalHoliday without action
   */
  export type PersonalHolidayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalHoliday
     */
    select?: PersonalHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalHoliday
     */
    omit?: PersonalHolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalHolidayInclude<ExtArgs> | null
  }


  /**
   * Model PublicHoliday
   */

  export type AggregatePublicHoliday = {
    _count: PublicHolidayCountAggregateOutputType | null
    _avg: PublicHolidayAvgAggregateOutputType | null
    _sum: PublicHolidaySumAggregateOutputType | null
    _min: PublicHolidayMinAggregateOutputType | null
    _max: PublicHolidayMaxAggregateOutputType | null
  }

  export type PublicHolidayAvgAggregateOutputType = {
    impactPercentage: number | null
  }

  export type PublicHolidaySumAggregateOutputType = {
    impactPercentage: number | null
  }

  export type PublicHolidayMinAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    impactPercentage: number | null
    createdAt: Date | null
  }

  export type PublicHolidayMaxAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    impactPercentage: number | null
    createdAt: Date | null
  }

  export type PublicHolidayCountAggregateOutputType = {
    id: number
    name: number
    date: number
    impactPercentage: number
    createdAt: number
    _all: number
  }


  export type PublicHolidayAvgAggregateInputType = {
    impactPercentage?: true
  }

  export type PublicHolidaySumAggregateInputType = {
    impactPercentage?: true
  }

  export type PublicHolidayMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    impactPercentage?: true
    createdAt?: true
  }

  export type PublicHolidayMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    impactPercentage?: true
    createdAt?: true
  }

  export type PublicHolidayCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    impactPercentage?: true
    createdAt?: true
    _all?: true
  }

  export type PublicHolidayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublicHoliday to aggregate.
     */
    where?: PublicHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicHolidays to fetch.
     */
    orderBy?: PublicHolidayOrderByWithRelationInput | PublicHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicHolidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PublicHolidays
    **/
    _count?: true | PublicHolidayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublicHolidayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublicHolidaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicHolidayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicHolidayMaxAggregateInputType
  }

  export type GetPublicHolidayAggregateType<T extends PublicHolidayAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicHoliday]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicHoliday[P]>
      : GetScalarType<T[P], AggregatePublicHoliday[P]>
  }




  export type PublicHolidayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicHolidayWhereInput
    orderBy?: PublicHolidayOrderByWithAggregationInput | PublicHolidayOrderByWithAggregationInput[]
    by: PublicHolidayScalarFieldEnum[] | PublicHolidayScalarFieldEnum
    having?: PublicHolidayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicHolidayCountAggregateInputType | true
    _avg?: PublicHolidayAvgAggregateInputType
    _sum?: PublicHolidaySumAggregateInputType
    _min?: PublicHolidayMinAggregateInputType
    _max?: PublicHolidayMaxAggregateInputType
  }

  export type PublicHolidayGroupByOutputType = {
    id: string
    name: string
    date: Date
    impactPercentage: number
    createdAt: Date
    _count: PublicHolidayCountAggregateOutputType | null
    _avg: PublicHolidayAvgAggregateOutputType | null
    _sum: PublicHolidaySumAggregateOutputType | null
    _min: PublicHolidayMinAggregateOutputType | null
    _max: PublicHolidayMaxAggregateOutputType | null
  }

  type GetPublicHolidayGroupByPayload<T extends PublicHolidayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicHolidayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicHolidayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicHolidayGroupByOutputType[P]>
            : GetScalarType<T[P], PublicHolidayGroupByOutputType[P]>
        }
      >
    >


  export type PublicHolidaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    impactPercentage?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["publicHoliday"]>

  export type PublicHolidaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    impactPercentage?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["publicHoliday"]>

  export type PublicHolidaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    impactPercentage?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["publicHoliday"]>

  export type PublicHolidaySelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    impactPercentage?: boolean
    createdAt?: boolean
  }

  export type PublicHolidayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "date" | "impactPercentage" | "createdAt", ExtArgs["result"]["publicHoliday"]>

  export type $PublicHolidayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PublicHoliday"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      date: Date
      impactPercentage: number
      createdAt: Date
    }, ExtArgs["result"]["publicHoliday"]>
    composites: {}
  }

  type PublicHolidayGetPayload<S extends boolean | null | undefined | PublicHolidayDefaultArgs> = $Result.GetResult<Prisma.$PublicHolidayPayload, S>

  type PublicHolidayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PublicHolidayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PublicHolidayCountAggregateInputType | true
    }

  export interface PublicHolidayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublicHoliday'], meta: { name: 'PublicHoliday' } }
    /**
     * Find zero or one PublicHoliday that matches the filter.
     * @param {PublicHolidayFindUniqueArgs} args - Arguments to find a PublicHoliday
     * @example
     * // Get one PublicHoliday
     * const publicHoliday = await prisma.publicHoliday.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublicHolidayFindUniqueArgs>(args: SelectSubset<T, PublicHolidayFindUniqueArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PublicHoliday that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PublicHolidayFindUniqueOrThrowArgs} args - Arguments to find a PublicHoliday
     * @example
     * // Get one PublicHoliday
     * const publicHoliday = await prisma.publicHoliday.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublicHolidayFindUniqueOrThrowArgs>(args: SelectSubset<T, PublicHolidayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PublicHoliday that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayFindFirstArgs} args - Arguments to find a PublicHoliday
     * @example
     * // Get one PublicHoliday
     * const publicHoliday = await prisma.publicHoliday.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublicHolidayFindFirstArgs>(args?: SelectSubset<T, PublicHolidayFindFirstArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PublicHoliday that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayFindFirstOrThrowArgs} args - Arguments to find a PublicHoliday
     * @example
     * // Get one PublicHoliday
     * const publicHoliday = await prisma.publicHoliday.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublicHolidayFindFirstOrThrowArgs>(args?: SelectSubset<T, PublicHolidayFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PublicHolidays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PublicHolidays
     * const publicHolidays = await prisma.publicHoliday.findMany()
     * 
     * // Get first 10 PublicHolidays
     * const publicHolidays = await prisma.publicHoliday.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicHolidayWithIdOnly = await prisma.publicHoliday.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublicHolidayFindManyArgs>(args?: SelectSubset<T, PublicHolidayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PublicHoliday.
     * @param {PublicHolidayCreateArgs} args - Arguments to create a PublicHoliday.
     * @example
     * // Create one PublicHoliday
     * const PublicHoliday = await prisma.publicHoliday.create({
     *   data: {
     *     // ... data to create a PublicHoliday
     *   }
     * })
     * 
     */
    create<T extends PublicHolidayCreateArgs>(args: SelectSubset<T, PublicHolidayCreateArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PublicHolidays.
     * @param {PublicHolidayCreateManyArgs} args - Arguments to create many PublicHolidays.
     * @example
     * // Create many PublicHolidays
     * const publicHoliday = await prisma.publicHoliday.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublicHolidayCreateManyArgs>(args?: SelectSubset<T, PublicHolidayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PublicHolidays and returns the data saved in the database.
     * @param {PublicHolidayCreateManyAndReturnArgs} args - Arguments to create many PublicHolidays.
     * @example
     * // Create many PublicHolidays
     * const publicHoliday = await prisma.publicHoliday.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PublicHolidays and only return the `id`
     * const publicHolidayWithIdOnly = await prisma.publicHoliday.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublicHolidayCreateManyAndReturnArgs>(args?: SelectSubset<T, PublicHolidayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PublicHoliday.
     * @param {PublicHolidayDeleteArgs} args - Arguments to delete one PublicHoliday.
     * @example
     * // Delete one PublicHoliday
     * const PublicHoliday = await prisma.publicHoliday.delete({
     *   where: {
     *     // ... filter to delete one PublicHoliday
     *   }
     * })
     * 
     */
    delete<T extends PublicHolidayDeleteArgs>(args: SelectSubset<T, PublicHolidayDeleteArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PublicHoliday.
     * @param {PublicHolidayUpdateArgs} args - Arguments to update one PublicHoliday.
     * @example
     * // Update one PublicHoliday
     * const publicHoliday = await prisma.publicHoliday.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublicHolidayUpdateArgs>(args: SelectSubset<T, PublicHolidayUpdateArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PublicHolidays.
     * @param {PublicHolidayDeleteManyArgs} args - Arguments to filter PublicHolidays to delete.
     * @example
     * // Delete a few PublicHolidays
     * const { count } = await prisma.publicHoliday.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublicHolidayDeleteManyArgs>(args?: SelectSubset<T, PublicHolidayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublicHolidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PublicHolidays
     * const publicHoliday = await prisma.publicHoliday.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublicHolidayUpdateManyArgs>(args: SelectSubset<T, PublicHolidayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublicHolidays and returns the data updated in the database.
     * @param {PublicHolidayUpdateManyAndReturnArgs} args - Arguments to update many PublicHolidays.
     * @example
     * // Update many PublicHolidays
     * const publicHoliday = await prisma.publicHoliday.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PublicHolidays and only return the `id`
     * const publicHolidayWithIdOnly = await prisma.publicHoliday.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PublicHolidayUpdateManyAndReturnArgs>(args: SelectSubset<T, PublicHolidayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PublicHoliday.
     * @param {PublicHolidayUpsertArgs} args - Arguments to update or create a PublicHoliday.
     * @example
     * // Update or create a PublicHoliday
     * const publicHoliday = await prisma.publicHoliday.upsert({
     *   create: {
     *     // ... data to create a PublicHoliday
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PublicHoliday we want to update
     *   }
     * })
     */
    upsert<T extends PublicHolidayUpsertArgs>(args: SelectSubset<T, PublicHolidayUpsertArgs<ExtArgs>>): Prisma__PublicHolidayClient<$Result.GetResult<Prisma.$PublicHolidayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PublicHolidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayCountArgs} args - Arguments to filter PublicHolidays to count.
     * @example
     * // Count the number of PublicHolidays
     * const count = await prisma.publicHoliday.count({
     *   where: {
     *     // ... the filter for the PublicHolidays we want to count
     *   }
     * })
    **/
    count<T extends PublicHolidayCountArgs>(
      args?: Subset<T, PublicHolidayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicHolidayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PublicHoliday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicHolidayAggregateArgs>(args: Subset<T, PublicHolidayAggregateArgs>): Prisma.PrismaPromise<GetPublicHolidayAggregateType<T>>

    /**
     * Group by PublicHoliday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicHolidayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicHolidayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicHolidayGroupByArgs['orderBy'] }
        : { orderBy?: PublicHolidayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicHolidayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicHolidayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PublicHoliday model
   */
  readonly fields: PublicHolidayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PublicHoliday.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicHolidayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PublicHoliday model
   */
  interface PublicHolidayFieldRefs {
    readonly id: FieldRef<"PublicHoliday", 'String'>
    readonly name: FieldRef<"PublicHoliday", 'String'>
    readonly date: FieldRef<"PublicHoliday", 'DateTime'>
    readonly impactPercentage: FieldRef<"PublicHoliday", 'Int'>
    readonly createdAt: FieldRef<"PublicHoliday", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PublicHoliday findUnique
   */
  export type PublicHolidayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * Filter, which PublicHoliday to fetch.
     */
    where: PublicHolidayWhereUniqueInput
  }

  /**
   * PublicHoliday findUniqueOrThrow
   */
  export type PublicHolidayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * Filter, which PublicHoliday to fetch.
     */
    where: PublicHolidayWhereUniqueInput
  }

  /**
   * PublicHoliday findFirst
   */
  export type PublicHolidayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * Filter, which PublicHoliday to fetch.
     */
    where?: PublicHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicHolidays to fetch.
     */
    orderBy?: PublicHolidayOrderByWithRelationInput | PublicHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublicHolidays.
     */
    cursor?: PublicHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicHolidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublicHolidays.
     */
    distinct?: PublicHolidayScalarFieldEnum | PublicHolidayScalarFieldEnum[]
  }

  /**
   * PublicHoliday findFirstOrThrow
   */
  export type PublicHolidayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * Filter, which PublicHoliday to fetch.
     */
    where?: PublicHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicHolidays to fetch.
     */
    orderBy?: PublicHolidayOrderByWithRelationInput | PublicHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublicHolidays.
     */
    cursor?: PublicHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicHolidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublicHolidays.
     */
    distinct?: PublicHolidayScalarFieldEnum | PublicHolidayScalarFieldEnum[]
  }

  /**
   * PublicHoliday findMany
   */
  export type PublicHolidayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * Filter, which PublicHolidays to fetch.
     */
    where?: PublicHolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicHolidays to fetch.
     */
    orderBy?: PublicHolidayOrderByWithRelationInput | PublicHolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PublicHolidays.
     */
    cursor?: PublicHolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicHolidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicHolidays.
     */
    skip?: number
    distinct?: PublicHolidayScalarFieldEnum | PublicHolidayScalarFieldEnum[]
  }

  /**
   * PublicHoliday create
   */
  export type PublicHolidayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * The data needed to create a PublicHoliday.
     */
    data: XOR<PublicHolidayCreateInput, PublicHolidayUncheckedCreateInput>
  }

  /**
   * PublicHoliday createMany
   */
  export type PublicHolidayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PublicHolidays.
     */
    data: PublicHolidayCreateManyInput | PublicHolidayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublicHoliday createManyAndReturn
   */
  export type PublicHolidayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * The data used to create many PublicHolidays.
     */
    data: PublicHolidayCreateManyInput | PublicHolidayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublicHoliday update
   */
  export type PublicHolidayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * The data needed to update a PublicHoliday.
     */
    data: XOR<PublicHolidayUpdateInput, PublicHolidayUncheckedUpdateInput>
    /**
     * Choose, which PublicHoliday to update.
     */
    where: PublicHolidayWhereUniqueInput
  }

  /**
   * PublicHoliday updateMany
   */
  export type PublicHolidayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PublicHolidays.
     */
    data: XOR<PublicHolidayUpdateManyMutationInput, PublicHolidayUncheckedUpdateManyInput>
    /**
     * Filter which PublicHolidays to update
     */
    where?: PublicHolidayWhereInput
    /**
     * Limit how many PublicHolidays to update.
     */
    limit?: number
  }

  /**
   * PublicHoliday updateManyAndReturn
   */
  export type PublicHolidayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * The data used to update PublicHolidays.
     */
    data: XOR<PublicHolidayUpdateManyMutationInput, PublicHolidayUncheckedUpdateManyInput>
    /**
     * Filter which PublicHolidays to update
     */
    where?: PublicHolidayWhereInput
    /**
     * Limit how many PublicHolidays to update.
     */
    limit?: number
  }

  /**
   * PublicHoliday upsert
   */
  export type PublicHolidayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * The filter to search for the PublicHoliday to update in case it exists.
     */
    where: PublicHolidayWhereUniqueInput
    /**
     * In case the PublicHoliday found by the `where` argument doesn't exist, create a new PublicHoliday with this data.
     */
    create: XOR<PublicHolidayCreateInput, PublicHolidayUncheckedCreateInput>
    /**
     * In case the PublicHoliday was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicHolidayUpdateInput, PublicHolidayUncheckedUpdateInput>
  }

  /**
   * PublicHoliday delete
   */
  export type PublicHolidayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
    /**
     * Filter which PublicHoliday to delete.
     */
    where: PublicHolidayWhereUniqueInput
  }

  /**
   * PublicHoliday deleteMany
   */
  export type PublicHolidayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublicHolidays to delete
     */
    where?: PublicHolidayWhereInput
    /**
     * Limit how many PublicHolidays to delete.
     */
    limit?: number
  }

  /**
   * PublicHoliday without action
   */
  export type PublicHolidayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicHoliday
     */
    select?: PublicHolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublicHoliday
     */
    omit?: PublicHolidayOmit<ExtArgs> | null
  }


  /**
   * Model SprintConfig
   */

  export type AggregateSprintConfig = {
    _count: SprintConfigCountAggregateOutputType | null
    _avg: SprintConfigAvgAggregateOutputType | null
    _sum: SprintConfigSumAggregateOutputType | null
    _min: SprintConfigMinAggregateOutputType | null
    _max: SprintConfigMaxAggregateOutputType | null
  }

  export type SprintConfigAvgAggregateOutputType = {
    sprintDurationDays: number | null
    defaultVelocity: number | null
  }

  export type SprintConfigSumAggregateOutputType = {
    sprintDurationDays: number | null
    defaultVelocity: number | null
  }

  export type SprintConfigMinAggregateOutputType = {
    id: string | null
    firstSprintStartDate: Date | null
    sprintDurationDays: number | null
    defaultVelocity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SprintConfigMaxAggregateOutputType = {
    id: string | null
    firstSprintStartDate: Date | null
    sprintDurationDays: number | null
    defaultVelocity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SprintConfigCountAggregateOutputType = {
    id: number
    firstSprintStartDate: number
    sprintDurationDays: number
    defaultVelocity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SprintConfigAvgAggregateInputType = {
    sprintDurationDays?: true
    defaultVelocity?: true
  }

  export type SprintConfigSumAggregateInputType = {
    sprintDurationDays?: true
    defaultVelocity?: true
  }

  export type SprintConfigMinAggregateInputType = {
    id?: true
    firstSprintStartDate?: true
    sprintDurationDays?: true
    defaultVelocity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SprintConfigMaxAggregateInputType = {
    id?: true
    firstSprintStartDate?: true
    sprintDurationDays?: true
    defaultVelocity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SprintConfigCountAggregateInputType = {
    id?: true
    firstSprintStartDate?: true
    sprintDurationDays?: true
    defaultVelocity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SprintConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SprintConfig to aggregate.
     */
    where?: SprintConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintConfigs to fetch.
     */
    orderBy?: SprintConfigOrderByWithRelationInput | SprintConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SprintConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SprintConfigs
    **/
    _count?: true | SprintConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SprintConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SprintConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SprintConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SprintConfigMaxAggregateInputType
  }

  export type GetSprintConfigAggregateType<T extends SprintConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSprintConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprintConfig[P]>
      : GetScalarType<T[P], AggregateSprintConfig[P]>
  }




  export type SprintConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintConfigWhereInput
    orderBy?: SprintConfigOrderByWithAggregationInput | SprintConfigOrderByWithAggregationInput[]
    by: SprintConfigScalarFieldEnum[] | SprintConfigScalarFieldEnum
    having?: SprintConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SprintConfigCountAggregateInputType | true
    _avg?: SprintConfigAvgAggregateInputType
    _sum?: SprintConfigSumAggregateInputType
    _min?: SprintConfigMinAggregateInputType
    _max?: SprintConfigMaxAggregateInputType
  }

  export type SprintConfigGroupByOutputType = {
    id: string
    firstSprintStartDate: Date
    sprintDurationDays: number
    defaultVelocity: number
    createdAt: Date
    updatedAt: Date
    _count: SprintConfigCountAggregateOutputType | null
    _avg: SprintConfigAvgAggregateOutputType | null
    _sum: SprintConfigSumAggregateOutputType | null
    _min: SprintConfigMinAggregateOutputType | null
    _max: SprintConfigMaxAggregateOutputType | null
  }

  type GetSprintConfigGroupByPayload<T extends SprintConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SprintConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SprintConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SprintConfigGroupByOutputType[P]>
        }
      >
    >


  export type SprintConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstSprintStartDate?: boolean
    sprintDurationDays?: boolean
    defaultVelocity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sprintConfig"]>

  export type SprintConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstSprintStartDate?: boolean
    sprintDurationDays?: boolean
    defaultVelocity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sprintConfig"]>

  export type SprintConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstSprintStartDate?: boolean
    sprintDurationDays?: boolean
    defaultVelocity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sprintConfig"]>

  export type SprintConfigSelectScalar = {
    id?: boolean
    firstSprintStartDate?: boolean
    sprintDurationDays?: boolean
    defaultVelocity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SprintConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstSprintStartDate" | "sprintDurationDays" | "defaultVelocity" | "createdAt" | "updatedAt", ExtArgs["result"]["sprintConfig"]>

  export type $SprintConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SprintConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstSprintStartDate: Date
      sprintDurationDays: number
      defaultVelocity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sprintConfig"]>
    composites: {}
  }

  type SprintConfigGetPayload<S extends boolean | null | undefined | SprintConfigDefaultArgs> = $Result.GetResult<Prisma.$SprintConfigPayload, S>

  type SprintConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SprintConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SprintConfigCountAggregateInputType | true
    }

  export interface SprintConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SprintConfig'], meta: { name: 'SprintConfig' } }
    /**
     * Find zero or one SprintConfig that matches the filter.
     * @param {SprintConfigFindUniqueArgs} args - Arguments to find a SprintConfig
     * @example
     * // Get one SprintConfig
     * const sprintConfig = await prisma.sprintConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SprintConfigFindUniqueArgs>(args: SelectSubset<T, SprintConfigFindUniqueArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SprintConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SprintConfigFindUniqueOrThrowArgs} args - Arguments to find a SprintConfig
     * @example
     * // Get one SprintConfig
     * const sprintConfig = await prisma.sprintConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SprintConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SprintConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SprintConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigFindFirstArgs} args - Arguments to find a SprintConfig
     * @example
     * // Get one SprintConfig
     * const sprintConfig = await prisma.sprintConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SprintConfigFindFirstArgs>(args?: SelectSubset<T, SprintConfigFindFirstArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SprintConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigFindFirstOrThrowArgs} args - Arguments to find a SprintConfig
     * @example
     * // Get one SprintConfig
     * const sprintConfig = await prisma.sprintConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SprintConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SprintConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SprintConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SprintConfigs
     * const sprintConfigs = await prisma.sprintConfig.findMany()
     * 
     * // Get first 10 SprintConfigs
     * const sprintConfigs = await prisma.sprintConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sprintConfigWithIdOnly = await prisma.sprintConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SprintConfigFindManyArgs>(args?: SelectSubset<T, SprintConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SprintConfig.
     * @param {SprintConfigCreateArgs} args - Arguments to create a SprintConfig.
     * @example
     * // Create one SprintConfig
     * const SprintConfig = await prisma.sprintConfig.create({
     *   data: {
     *     // ... data to create a SprintConfig
     *   }
     * })
     * 
     */
    create<T extends SprintConfigCreateArgs>(args: SelectSubset<T, SprintConfigCreateArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SprintConfigs.
     * @param {SprintConfigCreateManyArgs} args - Arguments to create many SprintConfigs.
     * @example
     * // Create many SprintConfigs
     * const sprintConfig = await prisma.sprintConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SprintConfigCreateManyArgs>(args?: SelectSubset<T, SprintConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SprintConfigs and returns the data saved in the database.
     * @param {SprintConfigCreateManyAndReturnArgs} args - Arguments to create many SprintConfigs.
     * @example
     * // Create many SprintConfigs
     * const sprintConfig = await prisma.sprintConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SprintConfigs and only return the `id`
     * const sprintConfigWithIdOnly = await prisma.sprintConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SprintConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SprintConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SprintConfig.
     * @param {SprintConfigDeleteArgs} args - Arguments to delete one SprintConfig.
     * @example
     * // Delete one SprintConfig
     * const SprintConfig = await prisma.sprintConfig.delete({
     *   where: {
     *     // ... filter to delete one SprintConfig
     *   }
     * })
     * 
     */
    delete<T extends SprintConfigDeleteArgs>(args: SelectSubset<T, SprintConfigDeleteArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SprintConfig.
     * @param {SprintConfigUpdateArgs} args - Arguments to update one SprintConfig.
     * @example
     * // Update one SprintConfig
     * const sprintConfig = await prisma.sprintConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SprintConfigUpdateArgs>(args: SelectSubset<T, SprintConfigUpdateArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SprintConfigs.
     * @param {SprintConfigDeleteManyArgs} args - Arguments to filter SprintConfigs to delete.
     * @example
     * // Delete a few SprintConfigs
     * const { count } = await prisma.sprintConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SprintConfigDeleteManyArgs>(args?: SelectSubset<T, SprintConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SprintConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SprintConfigs
     * const sprintConfig = await prisma.sprintConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SprintConfigUpdateManyArgs>(args: SelectSubset<T, SprintConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SprintConfigs and returns the data updated in the database.
     * @param {SprintConfigUpdateManyAndReturnArgs} args - Arguments to update many SprintConfigs.
     * @example
     * // Update many SprintConfigs
     * const sprintConfig = await prisma.sprintConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SprintConfigs and only return the `id`
     * const sprintConfigWithIdOnly = await prisma.sprintConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SprintConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SprintConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SprintConfig.
     * @param {SprintConfigUpsertArgs} args - Arguments to update or create a SprintConfig.
     * @example
     * // Update or create a SprintConfig
     * const sprintConfig = await prisma.sprintConfig.upsert({
     *   create: {
     *     // ... data to create a SprintConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SprintConfig we want to update
     *   }
     * })
     */
    upsert<T extends SprintConfigUpsertArgs>(args: SelectSubset<T, SprintConfigUpsertArgs<ExtArgs>>): Prisma__SprintConfigClient<$Result.GetResult<Prisma.$SprintConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SprintConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigCountArgs} args - Arguments to filter SprintConfigs to count.
     * @example
     * // Count the number of SprintConfigs
     * const count = await prisma.sprintConfig.count({
     *   where: {
     *     // ... the filter for the SprintConfigs we want to count
     *   }
     * })
    **/
    count<T extends SprintConfigCountArgs>(
      args?: Subset<T, SprintConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SprintConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SprintConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SprintConfigAggregateArgs>(args: Subset<T, SprintConfigAggregateArgs>): Prisma.PrismaPromise<GetSprintConfigAggregateType<T>>

    /**
     * Group by SprintConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SprintConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SprintConfigGroupByArgs['orderBy'] }
        : { orderBy?: SprintConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SprintConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprintConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SprintConfig model
   */
  readonly fields: SprintConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SprintConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SprintConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SprintConfig model
   */
  interface SprintConfigFieldRefs {
    readonly id: FieldRef<"SprintConfig", 'String'>
    readonly firstSprintStartDate: FieldRef<"SprintConfig", 'DateTime'>
    readonly sprintDurationDays: FieldRef<"SprintConfig", 'Int'>
    readonly defaultVelocity: FieldRef<"SprintConfig", 'Float'>
    readonly createdAt: FieldRef<"SprintConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SprintConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SprintConfig findUnique
   */
  export type SprintConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * Filter, which SprintConfig to fetch.
     */
    where: SprintConfigWhereUniqueInput
  }

  /**
   * SprintConfig findUniqueOrThrow
   */
  export type SprintConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * Filter, which SprintConfig to fetch.
     */
    where: SprintConfigWhereUniqueInput
  }

  /**
   * SprintConfig findFirst
   */
  export type SprintConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * Filter, which SprintConfig to fetch.
     */
    where?: SprintConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintConfigs to fetch.
     */
    orderBy?: SprintConfigOrderByWithRelationInput | SprintConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SprintConfigs.
     */
    cursor?: SprintConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SprintConfigs.
     */
    distinct?: SprintConfigScalarFieldEnum | SprintConfigScalarFieldEnum[]
  }

  /**
   * SprintConfig findFirstOrThrow
   */
  export type SprintConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * Filter, which SprintConfig to fetch.
     */
    where?: SprintConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintConfigs to fetch.
     */
    orderBy?: SprintConfigOrderByWithRelationInput | SprintConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SprintConfigs.
     */
    cursor?: SprintConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SprintConfigs.
     */
    distinct?: SprintConfigScalarFieldEnum | SprintConfigScalarFieldEnum[]
  }

  /**
   * SprintConfig findMany
   */
  export type SprintConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * Filter, which SprintConfigs to fetch.
     */
    where?: SprintConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SprintConfigs to fetch.
     */
    orderBy?: SprintConfigOrderByWithRelationInput | SprintConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SprintConfigs.
     */
    cursor?: SprintConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SprintConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SprintConfigs.
     */
    skip?: number
    distinct?: SprintConfigScalarFieldEnum | SprintConfigScalarFieldEnum[]
  }

  /**
   * SprintConfig create
   */
  export type SprintConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SprintConfig.
     */
    data: XOR<SprintConfigCreateInput, SprintConfigUncheckedCreateInput>
  }

  /**
   * SprintConfig createMany
   */
  export type SprintConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SprintConfigs.
     */
    data: SprintConfigCreateManyInput | SprintConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SprintConfig createManyAndReturn
   */
  export type SprintConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SprintConfigs.
     */
    data: SprintConfigCreateManyInput | SprintConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SprintConfig update
   */
  export type SprintConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SprintConfig.
     */
    data: XOR<SprintConfigUpdateInput, SprintConfigUncheckedUpdateInput>
    /**
     * Choose, which SprintConfig to update.
     */
    where: SprintConfigWhereUniqueInput
  }

  /**
   * SprintConfig updateMany
   */
  export type SprintConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SprintConfigs.
     */
    data: XOR<SprintConfigUpdateManyMutationInput, SprintConfigUncheckedUpdateManyInput>
    /**
     * Filter which SprintConfigs to update
     */
    where?: SprintConfigWhereInput
    /**
     * Limit how many SprintConfigs to update.
     */
    limit?: number
  }

  /**
   * SprintConfig updateManyAndReturn
   */
  export type SprintConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * The data used to update SprintConfigs.
     */
    data: XOR<SprintConfigUpdateManyMutationInput, SprintConfigUncheckedUpdateManyInput>
    /**
     * Filter which SprintConfigs to update
     */
    where?: SprintConfigWhereInput
    /**
     * Limit how many SprintConfigs to update.
     */
    limit?: number
  }

  /**
   * SprintConfig upsert
   */
  export type SprintConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SprintConfig to update in case it exists.
     */
    where: SprintConfigWhereUniqueInput
    /**
     * In case the SprintConfig found by the `where` argument doesn't exist, create a new SprintConfig with this data.
     */
    create: XOR<SprintConfigCreateInput, SprintConfigUncheckedCreateInput>
    /**
     * In case the SprintConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SprintConfigUpdateInput, SprintConfigUncheckedUpdateInput>
  }

  /**
   * SprintConfig delete
   */
  export type SprintConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
    /**
     * Filter which SprintConfig to delete.
     */
    where: SprintConfigWhereUniqueInput
  }

  /**
   * SprintConfig deleteMany
   */
  export type SprintConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SprintConfigs to delete
     */
    where?: SprintConfigWhereInput
    /**
     * Limit how many SprintConfigs to delete.
     */
    limit?: number
  }

  /**
   * SprintConfig without action
   */
  export type SprintConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintConfig
     */
    select?: SprintConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SprintConfig
     */
    omit?: SprintConfigOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TeamMemberScalarFieldEnum: {
    id: 'id',
    name: 'name',
    capacity: 'capacity',
    skills: 'skills',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const WorkItemScalarFieldEnum: {
    id: 'id',
    jiraId: 'jiraId',
    title: 'title',
    description: 'description',
    estimateStoryPoints: 'estimateStoryPoints',
    requiredCompletionDate: 'requiredCompletionDate',
    requiredSkills: 'requiredSkills',
    status: 'status',
    jiraStatus: 'jiraStatus',
    epicId: 'epicId',
    isEpic: 'isEpic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkItemScalarFieldEnum = (typeof WorkItemScalarFieldEnum)[keyof typeof WorkItemScalarFieldEnum]


  export const WorkItemDependencyScalarFieldEnum: {
    workItemId: 'workItemId',
    dependsOnId: 'dependsOnId',
    createdAt: 'createdAt'
  };

  export type WorkItemDependencyScalarFieldEnum = (typeof WorkItemDependencyScalarFieldEnum)[keyof typeof WorkItemDependencyScalarFieldEnum]


  export const SprintScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    plannedVelocity: 'plannedVelocity',
    actualVelocity: 'actualVelocity',
    archived: 'archived',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SprintScalarFieldEnum = (typeof SprintScalarFieldEnum)[keyof typeof SprintScalarFieldEnum]


  export const SprintWorkItemScalarFieldEnum: {
    sprintId: 'sprintId',
    workItemId: 'workItemId',
    assignedAt: 'assignedAt'
  };

  export type SprintWorkItemScalarFieldEnum = (typeof SprintWorkItemScalarFieldEnum)[keyof typeof SprintWorkItemScalarFieldEnum]


  export const PersonalHolidayScalarFieldEnum: {
    id: 'id',
    teamMemberId: 'teamMemberId',
    startDate: 'startDate',
    endDate: 'endDate',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type PersonalHolidayScalarFieldEnum = (typeof PersonalHolidayScalarFieldEnum)[keyof typeof PersonalHolidayScalarFieldEnum]


  export const PublicHolidayScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    impactPercentage: 'impactPercentage',
    createdAt: 'createdAt'
  };

  export type PublicHolidayScalarFieldEnum = (typeof PublicHolidayScalarFieldEnum)[keyof typeof PublicHolidayScalarFieldEnum]


  export const SprintConfigScalarFieldEnum: {
    id: 'id',
    firstSprintStartDate: 'firstSprintStartDate',
    sprintDurationDays: 'sprintDurationDays',
    defaultVelocity: 'defaultVelocity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SprintConfigScalarFieldEnum = (typeof SprintConfigScalarFieldEnum)[keyof typeof SprintConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type TeamMemberWhereInput = {
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    id?: StringFilter<"TeamMember"> | string
    name?: StringFilter<"TeamMember"> | string
    capacity?: IntFilter<"TeamMember"> | number
    skills?: JsonFilter<"TeamMember">
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeFilter<"TeamMember"> | Date | string
    personalHolidays?: PersonalHolidayListRelationFilter
  }

  export type TeamMemberOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    skills?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    personalHolidays?: PersonalHolidayOrderByRelationAggregateInput
  }

  export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    name?: StringFilter<"TeamMember"> | string
    capacity?: IntFilter<"TeamMember"> | number
    skills?: JsonFilter<"TeamMember">
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeFilter<"TeamMember"> | Date | string
    personalHolidays?: PersonalHolidayListRelationFilter
  }, "id">

  export type TeamMemberOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    skills?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _avg?: TeamMemberAvgOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
    _sum?: TeamMemberSumOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    OR?: TeamMemberScalarWhereWithAggregatesInput[]
    NOT?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamMember"> | string
    name?: StringWithAggregatesFilter<"TeamMember"> | string
    capacity?: IntWithAggregatesFilter<"TeamMember"> | number
    skills?: JsonWithAggregatesFilter<"TeamMember">
    createdAt?: DateTimeWithAggregatesFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamMember"> | Date | string
  }

  export type WorkItemWhereInput = {
    AND?: WorkItemWhereInput | WorkItemWhereInput[]
    OR?: WorkItemWhereInput[]
    NOT?: WorkItemWhereInput | WorkItemWhereInput[]
    id?: StringFilter<"WorkItem"> | string
    jiraId?: StringNullableFilter<"WorkItem"> | string | null
    title?: StringFilter<"WorkItem"> | string
    description?: StringNullableFilter<"WorkItem"> | string | null
    estimateStoryPoints?: FloatFilter<"WorkItem"> | number
    requiredCompletionDate?: DateTimeFilter<"WorkItem"> | Date | string
    requiredSkills?: JsonFilter<"WorkItem">
    status?: StringFilter<"WorkItem"> | string
    jiraStatus?: StringNullableFilter<"WorkItem"> | string | null
    epicId?: StringNullableFilter<"WorkItem"> | string | null
    isEpic?: BoolFilter<"WorkItem"> | boolean
    createdAt?: DateTimeFilter<"WorkItem"> | Date | string
    updatedAt?: DateTimeFilter<"WorkItem"> | Date | string
    dependencies?: WorkItemDependencyListRelationFilter
    dependentWorkItems?: WorkItemDependencyListRelationFilter
    sprintAssignments?: SprintWorkItemListRelationFilter
  }

  export type WorkItemOrderByWithRelationInput = {
    id?: SortOrder
    jiraId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    estimateStoryPoints?: SortOrder
    requiredCompletionDate?: SortOrder
    requiredSkills?: SortOrder
    status?: SortOrder
    jiraStatus?: SortOrderInput | SortOrder
    epicId?: SortOrderInput | SortOrder
    isEpic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dependencies?: WorkItemDependencyOrderByRelationAggregateInput
    dependentWorkItems?: WorkItemDependencyOrderByRelationAggregateInput
    sprintAssignments?: SprintWorkItemOrderByRelationAggregateInput
  }

  export type WorkItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkItemWhereInput | WorkItemWhereInput[]
    OR?: WorkItemWhereInput[]
    NOT?: WorkItemWhereInput | WorkItemWhereInput[]
    jiraId?: StringNullableFilter<"WorkItem"> | string | null
    title?: StringFilter<"WorkItem"> | string
    description?: StringNullableFilter<"WorkItem"> | string | null
    estimateStoryPoints?: FloatFilter<"WorkItem"> | number
    requiredCompletionDate?: DateTimeFilter<"WorkItem"> | Date | string
    requiredSkills?: JsonFilter<"WorkItem">
    status?: StringFilter<"WorkItem"> | string
    jiraStatus?: StringNullableFilter<"WorkItem"> | string | null
    epicId?: StringNullableFilter<"WorkItem"> | string | null
    isEpic?: BoolFilter<"WorkItem"> | boolean
    createdAt?: DateTimeFilter<"WorkItem"> | Date | string
    updatedAt?: DateTimeFilter<"WorkItem"> | Date | string
    dependencies?: WorkItemDependencyListRelationFilter
    dependentWorkItems?: WorkItemDependencyListRelationFilter
    sprintAssignments?: SprintWorkItemListRelationFilter
  }, "id">

  export type WorkItemOrderByWithAggregationInput = {
    id?: SortOrder
    jiraId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    estimateStoryPoints?: SortOrder
    requiredCompletionDate?: SortOrder
    requiredSkills?: SortOrder
    status?: SortOrder
    jiraStatus?: SortOrderInput | SortOrder
    epicId?: SortOrderInput | SortOrder
    isEpic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkItemCountOrderByAggregateInput
    _avg?: WorkItemAvgOrderByAggregateInput
    _max?: WorkItemMaxOrderByAggregateInput
    _min?: WorkItemMinOrderByAggregateInput
    _sum?: WorkItemSumOrderByAggregateInput
  }

  export type WorkItemScalarWhereWithAggregatesInput = {
    AND?: WorkItemScalarWhereWithAggregatesInput | WorkItemScalarWhereWithAggregatesInput[]
    OR?: WorkItemScalarWhereWithAggregatesInput[]
    NOT?: WorkItemScalarWhereWithAggregatesInput | WorkItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkItem"> | string
    jiraId?: StringNullableWithAggregatesFilter<"WorkItem"> | string | null
    title?: StringWithAggregatesFilter<"WorkItem"> | string
    description?: StringNullableWithAggregatesFilter<"WorkItem"> | string | null
    estimateStoryPoints?: FloatWithAggregatesFilter<"WorkItem"> | number
    requiredCompletionDate?: DateTimeWithAggregatesFilter<"WorkItem"> | Date | string
    requiredSkills?: JsonWithAggregatesFilter<"WorkItem">
    status?: StringWithAggregatesFilter<"WorkItem"> | string
    jiraStatus?: StringNullableWithAggregatesFilter<"WorkItem"> | string | null
    epicId?: StringNullableWithAggregatesFilter<"WorkItem"> | string | null
    isEpic?: BoolWithAggregatesFilter<"WorkItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WorkItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkItem"> | Date | string
  }

  export type WorkItemDependencyWhereInput = {
    AND?: WorkItemDependencyWhereInput | WorkItemDependencyWhereInput[]
    OR?: WorkItemDependencyWhereInput[]
    NOT?: WorkItemDependencyWhereInput | WorkItemDependencyWhereInput[]
    workItemId?: StringFilter<"WorkItemDependency"> | string
    dependsOnId?: StringFilter<"WorkItemDependency"> | string
    createdAt?: DateTimeFilter<"WorkItemDependency"> | Date | string
    workItem?: XOR<WorkItemScalarRelationFilter, WorkItemWhereInput>
    dependsOn?: XOR<WorkItemScalarRelationFilter, WorkItemWhereInput>
  }

  export type WorkItemDependencyOrderByWithRelationInput = {
    workItemId?: SortOrder
    dependsOnId?: SortOrder
    createdAt?: SortOrder
    workItem?: WorkItemOrderByWithRelationInput
    dependsOn?: WorkItemOrderByWithRelationInput
  }

  export type WorkItemDependencyWhereUniqueInput = Prisma.AtLeast<{
    workItemId_dependsOnId?: WorkItemDependencyWorkItemIdDependsOnIdCompoundUniqueInput
    AND?: WorkItemDependencyWhereInput | WorkItemDependencyWhereInput[]
    OR?: WorkItemDependencyWhereInput[]
    NOT?: WorkItemDependencyWhereInput | WorkItemDependencyWhereInput[]
    workItemId?: StringFilter<"WorkItemDependency"> | string
    dependsOnId?: StringFilter<"WorkItemDependency"> | string
    createdAt?: DateTimeFilter<"WorkItemDependency"> | Date | string
    workItem?: XOR<WorkItemScalarRelationFilter, WorkItemWhereInput>
    dependsOn?: XOR<WorkItemScalarRelationFilter, WorkItemWhereInput>
  }, "workItemId_dependsOnId">

  export type WorkItemDependencyOrderByWithAggregationInput = {
    workItemId?: SortOrder
    dependsOnId?: SortOrder
    createdAt?: SortOrder
    _count?: WorkItemDependencyCountOrderByAggregateInput
    _max?: WorkItemDependencyMaxOrderByAggregateInput
    _min?: WorkItemDependencyMinOrderByAggregateInput
  }

  export type WorkItemDependencyScalarWhereWithAggregatesInput = {
    AND?: WorkItemDependencyScalarWhereWithAggregatesInput | WorkItemDependencyScalarWhereWithAggregatesInput[]
    OR?: WorkItemDependencyScalarWhereWithAggregatesInput[]
    NOT?: WorkItemDependencyScalarWhereWithAggregatesInput | WorkItemDependencyScalarWhereWithAggregatesInput[]
    workItemId?: StringWithAggregatesFilter<"WorkItemDependency"> | string
    dependsOnId?: StringWithAggregatesFilter<"WorkItemDependency"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkItemDependency"> | Date | string
  }

  export type SprintWhereInput = {
    AND?: SprintWhereInput | SprintWhereInput[]
    OR?: SprintWhereInput[]
    NOT?: SprintWhereInput | SprintWhereInput[]
    id?: StringFilter<"Sprint"> | string
    name?: StringFilter<"Sprint"> | string
    startDate?: DateTimeFilter<"Sprint"> | Date | string
    endDate?: DateTimeFilter<"Sprint"> | Date | string
    plannedVelocity?: FloatFilter<"Sprint"> | number
    actualVelocity?: FloatNullableFilter<"Sprint"> | number | null
    archived?: BoolFilter<"Sprint"> | boolean
    createdAt?: DateTimeFilter<"Sprint"> | Date | string
    updatedAt?: DateTimeFilter<"Sprint"> | Date | string
    workItemAssignments?: SprintWorkItemListRelationFilter
  }

  export type SprintOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrderInput | SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workItemAssignments?: SprintWorkItemOrderByRelationAggregateInput
  }

  export type SprintWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SprintWhereInput | SprintWhereInput[]
    OR?: SprintWhereInput[]
    NOT?: SprintWhereInput | SprintWhereInput[]
    name?: StringFilter<"Sprint"> | string
    startDate?: DateTimeFilter<"Sprint"> | Date | string
    endDate?: DateTimeFilter<"Sprint"> | Date | string
    plannedVelocity?: FloatFilter<"Sprint"> | number
    actualVelocity?: FloatNullableFilter<"Sprint"> | number | null
    archived?: BoolFilter<"Sprint"> | boolean
    createdAt?: DateTimeFilter<"Sprint"> | Date | string
    updatedAt?: DateTimeFilter<"Sprint"> | Date | string
    workItemAssignments?: SprintWorkItemListRelationFilter
  }, "id">

  export type SprintOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrderInput | SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SprintCountOrderByAggregateInput
    _avg?: SprintAvgOrderByAggregateInput
    _max?: SprintMaxOrderByAggregateInput
    _min?: SprintMinOrderByAggregateInput
    _sum?: SprintSumOrderByAggregateInput
  }

  export type SprintScalarWhereWithAggregatesInput = {
    AND?: SprintScalarWhereWithAggregatesInput | SprintScalarWhereWithAggregatesInput[]
    OR?: SprintScalarWhereWithAggregatesInput[]
    NOT?: SprintScalarWhereWithAggregatesInput | SprintScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sprint"> | string
    name?: StringWithAggregatesFilter<"Sprint"> | string
    startDate?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string
    plannedVelocity?: FloatWithAggregatesFilter<"Sprint"> | number
    actualVelocity?: FloatNullableWithAggregatesFilter<"Sprint"> | number | null
    archived?: BoolWithAggregatesFilter<"Sprint"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string
  }

  export type SprintWorkItemWhereInput = {
    AND?: SprintWorkItemWhereInput | SprintWorkItemWhereInput[]
    OR?: SprintWorkItemWhereInput[]
    NOT?: SprintWorkItemWhereInput | SprintWorkItemWhereInput[]
    sprintId?: StringFilter<"SprintWorkItem"> | string
    workItemId?: StringFilter<"SprintWorkItem"> | string
    assignedAt?: DateTimeFilter<"SprintWorkItem"> | Date | string
    sprint?: XOR<SprintScalarRelationFilter, SprintWhereInput>
    workItem?: XOR<WorkItemScalarRelationFilter, WorkItemWhereInput>
  }

  export type SprintWorkItemOrderByWithRelationInput = {
    sprintId?: SortOrder
    workItemId?: SortOrder
    assignedAt?: SortOrder
    sprint?: SprintOrderByWithRelationInput
    workItem?: WorkItemOrderByWithRelationInput
  }

  export type SprintWorkItemWhereUniqueInput = Prisma.AtLeast<{
    sprintId_workItemId?: SprintWorkItemSprintIdWorkItemIdCompoundUniqueInput
    AND?: SprintWorkItemWhereInput | SprintWorkItemWhereInput[]
    OR?: SprintWorkItemWhereInput[]
    NOT?: SprintWorkItemWhereInput | SprintWorkItemWhereInput[]
    sprintId?: StringFilter<"SprintWorkItem"> | string
    workItemId?: StringFilter<"SprintWorkItem"> | string
    assignedAt?: DateTimeFilter<"SprintWorkItem"> | Date | string
    sprint?: XOR<SprintScalarRelationFilter, SprintWhereInput>
    workItem?: XOR<WorkItemScalarRelationFilter, WorkItemWhereInput>
  }, "sprintId_workItemId">

  export type SprintWorkItemOrderByWithAggregationInput = {
    sprintId?: SortOrder
    workItemId?: SortOrder
    assignedAt?: SortOrder
    _count?: SprintWorkItemCountOrderByAggregateInput
    _max?: SprintWorkItemMaxOrderByAggregateInput
    _min?: SprintWorkItemMinOrderByAggregateInput
  }

  export type SprintWorkItemScalarWhereWithAggregatesInput = {
    AND?: SprintWorkItemScalarWhereWithAggregatesInput | SprintWorkItemScalarWhereWithAggregatesInput[]
    OR?: SprintWorkItemScalarWhereWithAggregatesInput[]
    NOT?: SprintWorkItemScalarWhereWithAggregatesInput | SprintWorkItemScalarWhereWithAggregatesInput[]
    sprintId?: StringWithAggregatesFilter<"SprintWorkItem"> | string
    workItemId?: StringWithAggregatesFilter<"SprintWorkItem"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"SprintWorkItem"> | Date | string
  }

  export type PersonalHolidayWhereInput = {
    AND?: PersonalHolidayWhereInput | PersonalHolidayWhereInput[]
    OR?: PersonalHolidayWhereInput[]
    NOT?: PersonalHolidayWhereInput | PersonalHolidayWhereInput[]
    id?: StringFilter<"PersonalHoliday"> | string
    teamMemberId?: StringFilter<"PersonalHoliday"> | string
    startDate?: DateTimeFilter<"PersonalHoliday"> | Date | string
    endDate?: DateTimeFilter<"PersonalHoliday"> | Date | string
    description?: StringNullableFilter<"PersonalHoliday"> | string | null
    createdAt?: DateTimeFilter<"PersonalHoliday"> | Date | string
    teamMember?: XOR<TeamMemberScalarRelationFilter, TeamMemberWhereInput>
  }

  export type PersonalHolidayOrderByWithRelationInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    teamMember?: TeamMemberOrderByWithRelationInput
  }

  export type PersonalHolidayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PersonalHolidayWhereInput | PersonalHolidayWhereInput[]
    OR?: PersonalHolidayWhereInput[]
    NOT?: PersonalHolidayWhereInput | PersonalHolidayWhereInput[]
    teamMemberId?: StringFilter<"PersonalHoliday"> | string
    startDate?: DateTimeFilter<"PersonalHoliday"> | Date | string
    endDate?: DateTimeFilter<"PersonalHoliday"> | Date | string
    description?: StringNullableFilter<"PersonalHoliday"> | string | null
    createdAt?: DateTimeFilter<"PersonalHoliday"> | Date | string
    teamMember?: XOR<TeamMemberScalarRelationFilter, TeamMemberWhereInput>
  }, "id">

  export type PersonalHolidayOrderByWithAggregationInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PersonalHolidayCountOrderByAggregateInput
    _max?: PersonalHolidayMaxOrderByAggregateInput
    _min?: PersonalHolidayMinOrderByAggregateInput
  }

  export type PersonalHolidayScalarWhereWithAggregatesInput = {
    AND?: PersonalHolidayScalarWhereWithAggregatesInput | PersonalHolidayScalarWhereWithAggregatesInput[]
    OR?: PersonalHolidayScalarWhereWithAggregatesInput[]
    NOT?: PersonalHolidayScalarWhereWithAggregatesInput | PersonalHolidayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PersonalHoliday"> | string
    teamMemberId?: StringWithAggregatesFilter<"PersonalHoliday"> | string
    startDate?: DateTimeWithAggregatesFilter<"PersonalHoliday"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"PersonalHoliday"> | Date | string
    description?: StringNullableWithAggregatesFilter<"PersonalHoliday"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PersonalHoliday"> | Date | string
  }

  export type PublicHolidayWhereInput = {
    AND?: PublicHolidayWhereInput | PublicHolidayWhereInput[]
    OR?: PublicHolidayWhereInput[]
    NOT?: PublicHolidayWhereInput | PublicHolidayWhereInput[]
    id?: StringFilter<"PublicHoliday"> | string
    name?: StringFilter<"PublicHoliday"> | string
    date?: DateTimeFilter<"PublicHoliday"> | Date | string
    impactPercentage?: IntFilter<"PublicHoliday"> | number
    createdAt?: DateTimeFilter<"PublicHoliday"> | Date | string
  }

  export type PublicHolidayOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    impactPercentage?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicHolidayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublicHolidayWhereInput | PublicHolidayWhereInput[]
    OR?: PublicHolidayWhereInput[]
    NOT?: PublicHolidayWhereInput | PublicHolidayWhereInput[]
    name?: StringFilter<"PublicHoliday"> | string
    date?: DateTimeFilter<"PublicHoliday"> | Date | string
    impactPercentage?: IntFilter<"PublicHoliday"> | number
    createdAt?: DateTimeFilter<"PublicHoliday"> | Date | string
  }, "id">

  export type PublicHolidayOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    impactPercentage?: SortOrder
    createdAt?: SortOrder
    _count?: PublicHolidayCountOrderByAggregateInput
    _avg?: PublicHolidayAvgOrderByAggregateInput
    _max?: PublicHolidayMaxOrderByAggregateInput
    _min?: PublicHolidayMinOrderByAggregateInput
    _sum?: PublicHolidaySumOrderByAggregateInput
  }

  export type PublicHolidayScalarWhereWithAggregatesInput = {
    AND?: PublicHolidayScalarWhereWithAggregatesInput | PublicHolidayScalarWhereWithAggregatesInput[]
    OR?: PublicHolidayScalarWhereWithAggregatesInput[]
    NOT?: PublicHolidayScalarWhereWithAggregatesInput | PublicHolidayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PublicHoliday"> | string
    name?: StringWithAggregatesFilter<"PublicHoliday"> | string
    date?: DateTimeWithAggregatesFilter<"PublicHoliday"> | Date | string
    impactPercentage?: IntWithAggregatesFilter<"PublicHoliday"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PublicHoliday"> | Date | string
  }

  export type SprintConfigWhereInput = {
    AND?: SprintConfigWhereInput | SprintConfigWhereInput[]
    OR?: SprintConfigWhereInput[]
    NOT?: SprintConfigWhereInput | SprintConfigWhereInput[]
    id?: StringFilter<"SprintConfig"> | string
    firstSprintStartDate?: DateTimeFilter<"SprintConfig"> | Date | string
    sprintDurationDays?: IntFilter<"SprintConfig"> | number
    defaultVelocity?: FloatFilter<"SprintConfig"> | number
    createdAt?: DateTimeFilter<"SprintConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SprintConfig"> | Date | string
  }

  export type SprintConfigOrderByWithRelationInput = {
    id?: SortOrder
    firstSprintStartDate?: SortOrder
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SprintConfigWhereInput | SprintConfigWhereInput[]
    OR?: SprintConfigWhereInput[]
    NOT?: SprintConfigWhereInput | SprintConfigWhereInput[]
    firstSprintStartDate?: DateTimeFilter<"SprintConfig"> | Date | string
    sprintDurationDays?: IntFilter<"SprintConfig"> | number
    defaultVelocity?: FloatFilter<"SprintConfig"> | number
    createdAt?: DateTimeFilter<"SprintConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SprintConfig"> | Date | string
  }, "id">

  export type SprintConfigOrderByWithAggregationInput = {
    id?: SortOrder
    firstSprintStartDate?: SortOrder
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SprintConfigCountOrderByAggregateInput
    _avg?: SprintConfigAvgOrderByAggregateInput
    _max?: SprintConfigMaxOrderByAggregateInput
    _min?: SprintConfigMinOrderByAggregateInput
    _sum?: SprintConfigSumOrderByAggregateInput
  }

  export type SprintConfigScalarWhereWithAggregatesInput = {
    AND?: SprintConfigScalarWhereWithAggregatesInput | SprintConfigScalarWhereWithAggregatesInput[]
    OR?: SprintConfigScalarWhereWithAggregatesInput[]
    NOT?: SprintConfigScalarWhereWithAggregatesInput | SprintConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SprintConfig"> | string
    firstSprintStartDate?: DateTimeWithAggregatesFilter<"SprintConfig"> | Date | string
    sprintDurationDays?: IntWithAggregatesFilter<"SprintConfig"> | number
    defaultVelocity?: FloatWithAggregatesFilter<"SprintConfig"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SprintConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SprintConfig"> | Date | string
  }

  export type TeamMemberCreateInput = {
    id?: string
    name: string
    capacity?: number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    personalHolidays?: PersonalHolidayCreateNestedManyWithoutTeamMemberInput
  }

  export type TeamMemberUncheckedCreateInput = {
    id?: string
    name: string
    capacity?: number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    personalHolidays?: PersonalHolidayUncheckedCreateNestedManyWithoutTeamMemberInput
  }

  export type TeamMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personalHolidays?: PersonalHolidayUpdateManyWithoutTeamMemberNestedInput
  }

  export type TeamMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personalHolidays?: PersonalHolidayUncheckedUpdateManyWithoutTeamMemberNestedInput
  }

  export type TeamMemberCreateManyInput = {
    id?: string
    name: string
    capacity?: number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemCreateInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependencies?: WorkItemDependencyCreateNestedManyWithoutWorkItemInput
    dependentWorkItems?: WorkItemDependencyCreateNestedManyWithoutDependsOnInput
    sprintAssignments?: SprintWorkItemCreateNestedManyWithoutWorkItemInput
  }

  export type WorkItemUncheckedCreateInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependencies?: WorkItemDependencyUncheckedCreateNestedManyWithoutWorkItemInput
    dependentWorkItems?: WorkItemDependencyUncheckedCreateNestedManyWithoutDependsOnInput
    sprintAssignments?: SprintWorkItemUncheckedCreateNestedManyWithoutWorkItemInput
  }

  export type WorkItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependencies?: WorkItemDependencyUpdateManyWithoutWorkItemNestedInput
    dependentWorkItems?: WorkItemDependencyUpdateManyWithoutDependsOnNestedInput
    sprintAssignments?: SprintWorkItemUpdateManyWithoutWorkItemNestedInput
  }

  export type WorkItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependencies?: WorkItemDependencyUncheckedUpdateManyWithoutWorkItemNestedInput
    dependentWorkItems?: WorkItemDependencyUncheckedUpdateManyWithoutDependsOnNestedInput
    sprintAssignments?: SprintWorkItemUncheckedUpdateManyWithoutWorkItemNestedInput
  }

  export type WorkItemCreateManyInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyCreateInput = {
    createdAt?: Date | string
    workItem: WorkItemCreateNestedOneWithoutDependenciesInput
    dependsOn: WorkItemCreateNestedOneWithoutDependentWorkItemsInput
  }

  export type WorkItemDependencyUncheckedCreateInput = {
    workItemId: string
    dependsOnId: string
    createdAt?: Date | string
  }

  export type WorkItemDependencyUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workItem?: WorkItemUpdateOneRequiredWithoutDependenciesNestedInput
    dependsOn?: WorkItemUpdateOneRequiredWithoutDependentWorkItemsNestedInput
  }

  export type WorkItemDependencyUncheckedUpdateInput = {
    workItemId?: StringFieldUpdateOperationsInput | string
    dependsOnId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyCreateManyInput = {
    workItemId: string
    dependsOnId: string
    createdAt?: Date | string
  }

  export type WorkItemDependencyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyUncheckedUpdateManyInput = {
    workItemId?: StringFieldUpdateOperationsInput | string
    dependsOnId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    plannedVelocity: number
    actualVelocity?: number | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workItemAssignments?: SprintWorkItemCreateNestedManyWithoutSprintInput
  }

  export type SprintUncheckedCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    plannedVelocity: number
    actualVelocity?: number | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workItemAssignments?: SprintWorkItemUncheckedCreateNestedManyWithoutSprintInput
  }

  export type SprintUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plannedVelocity?: FloatFieldUpdateOperationsInput | number
    actualVelocity?: NullableFloatFieldUpdateOperationsInput | number | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workItemAssignments?: SprintWorkItemUpdateManyWithoutSprintNestedInput
  }

  export type SprintUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plannedVelocity?: FloatFieldUpdateOperationsInput | number
    actualVelocity?: NullableFloatFieldUpdateOperationsInput | number | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workItemAssignments?: SprintWorkItemUncheckedUpdateManyWithoutSprintNestedInput
  }

  export type SprintCreateManyInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    plannedVelocity: number
    actualVelocity?: number | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plannedVelocity?: FloatFieldUpdateOperationsInput | number
    actualVelocity?: NullableFloatFieldUpdateOperationsInput | number | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plannedVelocity?: FloatFieldUpdateOperationsInput | number
    actualVelocity?: NullableFloatFieldUpdateOperationsInput | number | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemCreateInput = {
    assignedAt?: Date | string
    sprint: SprintCreateNestedOneWithoutWorkItemAssignmentsInput
    workItem: WorkItemCreateNestedOneWithoutSprintAssignmentsInput
  }

  export type SprintWorkItemUncheckedCreateInput = {
    sprintId: string
    workItemId: string
    assignedAt?: Date | string
  }

  export type SprintWorkItemUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: SprintUpdateOneRequiredWithoutWorkItemAssignmentsNestedInput
    workItem?: WorkItemUpdateOneRequiredWithoutSprintAssignmentsNestedInput
  }

  export type SprintWorkItemUncheckedUpdateInput = {
    sprintId?: StringFieldUpdateOperationsInput | string
    workItemId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemCreateManyInput = {
    sprintId: string
    workItemId: string
    assignedAt?: Date | string
  }

  export type SprintWorkItemUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemUncheckedUpdateManyInput = {
    sprintId?: StringFieldUpdateOperationsInput | string
    workItemId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalHolidayCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    createdAt?: Date | string
    teamMember: TeamMemberCreateNestedOneWithoutPersonalHolidaysInput
  }

  export type PersonalHolidayUncheckedCreateInput = {
    id?: string
    teamMemberId: string
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type PersonalHolidayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMember?: TeamMemberUpdateOneRequiredWithoutPersonalHolidaysNestedInput
  }

  export type PersonalHolidayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamMemberId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalHolidayCreateManyInput = {
    id?: string
    teamMemberId: string
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type PersonalHolidayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalHolidayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamMemberId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicHolidayCreateInput = {
    id?: string
    name: string
    date: Date | string
    impactPercentage: number
    createdAt?: Date | string
  }

  export type PublicHolidayUncheckedCreateInput = {
    id?: string
    name: string
    date: Date | string
    impactPercentage: number
    createdAt?: Date | string
  }

  export type PublicHolidayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    impactPercentage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicHolidayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    impactPercentage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicHolidayCreateManyInput = {
    id?: string
    name: string
    date: Date | string
    impactPercentage: number
    createdAt?: Date | string
  }

  export type PublicHolidayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    impactPercentage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicHolidayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    impactPercentage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintConfigCreateInput = {
    id?: string
    firstSprintStartDate: Date | string
    sprintDurationDays: number
    defaultVelocity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintConfigUncheckedCreateInput = {
    id?: string
    firstSprintStartDate: Date | string
    sprintDurationDays: number
    defaultVelocity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstSprintStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprintDurationDays?: IntFieldUpdateOperationsInput | number
    defaultVelocity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstSprintStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprintDurationDays?: IntFieldUpdateOperationsInput | number
    defaultVelocity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintConfigCreateManyInput = {
    id?: string
    firstSprintStartDate: Date | string
    sprintDurationDays: number
    defaultVelocity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstSprintStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprintDurationDays?: IntFieldUpdateOperationsInput | number
    defaultVelocity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstSprintStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprintDurationDays?: IntFieldUpdateOperationsInput | number
    defaultVelocity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PersonalHolidayListRelationFilter = {
    every?: PersonalHolidayWhereInput
    some?: PersonalHolidayWhereInput
    none?: PersonalHolidayWhereInput
  }

  export type PersonalHolidayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMemberCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    skills?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMemberAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMemberSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type WorkItemDependencyListRelationFilter = {
    every?: WorkItemDependencyWhereInput
    some?: WorkItemDependencyWhereInput
    none?: WorkItemDependencyWhereInput
  }

  export type SprintWorkItemListRelationFilter = {
    every?: SprintWorkItemWhereInput
    some?: SprintWorkItemWhereInput
    none?: SprintWorkItemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WorkItemDependencyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SprintWorkItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkItemCountOrderByAggregateInput = {
    id?: SortOrder
    jiraId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    estimateStoryPoints?: SortOrder
    requiredCompletionDate?: SortOrder
    requiredSkills?: SortOrder
    status?: SortOrder
    jiraStatus?: SortOrder
    epicId?: SortOrder
    isEpic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkItemAvgOrderByAggregateInput = {
    estimateStoryPoints?: SortOrder
  }

  export type WorkItemMaxOrderByAggregateInput = {
    id?: SortOrder
    jiraId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    estimateStoryPoints?: SortOrder
    requiredCompletionDate?: SortOrder
    status?: SortOrder
    jiraStatus?: SortOrder
    epicId?: SortOrder
    isEpic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkItemMinOrderByAggregateInput = {
    id?: SortOrder
    jiraId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    estimateStoryPoints?: SortOrder
    requiredCompletionDate?: SortOrder
    status?: SortOrder
    jiraStatus?: SortOrder
    epicId?: SortOrder
    isEpic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkItemSumOrderByAggregateInput = {
    estimateStoryPoints?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type WorkItemScalarRelationFilter = {
    is?: WorkItemWhereInput
    isNot?: WorkItemWhereInput
  }

  export type WorkItemDependencyWorkItemIdDependsOnIdCompoundUniqueInput = {
    workItemId: string
    dependsOnId: string
  }

  export type WorkItemDependencyCountOrderByAggregateInput = {
    workItemId?: SortOrder
    dependsOnId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkItemDependencyMaxOrderByAggregateInput = {
    workItemId?: SortOrder
    dependsOnId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkItemDependencyMinOrderByAggregateInput = {
    workItemId?: SortOrder
    dependsOnId?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SprintCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintAvgOrderByAggregateInput = {
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrder
  }

  export type SprintMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintSumOrderByAggregateInput = {
    plannedVelocity?: SortOrder
    actualVelocity?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SprintScalarRelationFilter = {
    is?: SprintWhereInput
    isNot?: SprintWhereInput
  }

  export type SprintWorkItemSprintIdWorkItemIdCompoundUniqueInput = {
    sprintId: string
    workItemId: string
  }

  export type SprintWorkItemCountOrderByAggregateInput = {
    sprintId?: SortOrder
    workItemId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SprintWorkItemMaxOrderByAggregateInput = {
    sprintId?: SortOrder
    workItemId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SprintWorkItemMinOrderByAggregateInput = {
    sprintId?: SortOrder
    workItemId?: SortOrder
    assignedAt?: SortOrder
  }

  export type TeamMemberScalarRelationFilter = {
    is?: TeamMemberWhereInput
    isNot?: TeamMemberWhereInput
  }

  export type PersonalHolidayCountOrderByAggregateInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonalHolidayMaxOrderByAggregateInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PersonalHolidayMinOrderByAggregateInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicHolidayCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    impactPercentage?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicHolidayAvgOrderByAggregateInput = {
    impactPercentage?: SortOrder
  }

  export type PublicHolidayMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    impactPercentage?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicHolidayMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    impactPercentage?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicHolidaySumOrderByAggregateInput = {
    impactPercentage?: SortOrder
  }

  export type SprintConfigCountOrderByAggregateInput = {
    id?: SortOrder
    firstSprintStartDate?: SortOrder
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintConfigAvgOrderByAggregateInput = {
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
  }

  export type SprintConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    firstSprintStartDate?: SortOrder
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintConfigMinOrderByAggregateInput = {
    id?: SortOrder
    firstSprintStartDate?: SortOrder
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SprintConfigSumOrderByAggregateInput = {
    sprintDurationDays?: SortOrder
    defaultVelocity?: SortOrder
  }

  export type PersonalHolidayCreateNestedManyWithoutTeamMemberInput = {
    create?: XOR<PersonalHolidayCreateWithoutTeamMemberInput, PersonalHolidayUncheckedCreateWithoutTeamMemberInput> | PersonalHolidayCreateWithoutTeamMemberInput[] | PersonalHolidayUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: PersonalHolidayCreateOrConnectWithoutTeamMemberInput | PersonalHolidayCreateOrConnectWithoutTeamMemberInput[]
    createMany?: PersonalHolidayCreateManyTeamMemberInputEnvelope
    connect?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
  }

  export type PersonalHolidayUncheckedCreateNestedManyWithoutTeamMemberInput = {
    create?: XOR<PersonalHolidayCreateWithoutTeamMemberInput, PersonalHolidayUncheckedCreateWithoutTeamMemberInput> | PersonalHolidayCreateWithoutTeamMemberInput[] | PersonalHolidayUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: PersonalHolidayCreateOrConnectWithoutTeamMemberInput | PersonalHolidayCreateOrConnectWithoutTeamMemberInput[]
    createMany?: PersonalHolidayCreateManyTeamMemberInputEnvelope
    connect?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PersonalHolidayUpdateManyWithoutTeamMemberNestedInput = {
    create?: XOR<PersonalHolidayCreateWithoutTeamMemberInput, PersonalHolidayUncheckedCreateWithoutTeamMemberInput> | PersonalHolidayCreateWithoutTeamMemberInput[] | PersonalHolidayUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: PersonalHolidayCreateOrConnectWithoutTeamMemberInput | PersonalHolidayCreateOrConnectWithoutTeamMemberInput[]
    upsert?: PersonalHolidayUpsertWithWhereUniqueWithoutTeamMemberInput | PersonalHolidayUpsertWithWhereUniqueWithoutTeamMemberInput[]
    createMany?: PersonalHolidayCreateManyTeamMemberInputEnvelope
    set?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    disconnect?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    delete?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    connect?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    update?: PersonalHolidayUpdateWithWhereUniqueWithoutTeamMemberInput | PersonalHolidayUpdateWithWhereUniqueWithoutTeamMemberInput[]
    updateMany?: PersonalHolidayUpdateManyWithWhereWithoutTeamMemberInput | PersonalHolidayUpdateManyWithWhereWithoutTeamMemberInput[]
    deleteMany?: PersonalHolidayScalarWhereInput | PersonalHolidayScalarWhereInput[]
  }

  export type PersonalHolidayUncheckedUpdateManyWithoutTeamMemberNestedInput = {
    create?: XOR<PersonalHolidayCreateWithoutTeamMemberInput, PersonalHolidayUncheckedCreateWithoutTeamMemberInput> | PersonalHolidayCreateWithoutTeamMemberInput[] | PersonalHolidayUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: PersonalHolidayCreateOrConnectWithoutTeamMemberInput | PersonalHolidayCreateOrConnectWithoutTeamMemberInput[]
    upsert?: PersonalHolidayUpsertWithWhereUniqueWithoutTeamMemberInput | PersonalHolidayUpsertWithWhereUniqueWithoutTeamMemberInput[]
    createMany?: PersonalHolidayCreateManyTeamMemberInputEnvelope
    set?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    disconnect?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    delete?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    connect?: PersonalHolidayWhereUniqueInput | PersonalHolidayWhereUniqueInput[]
    update?: PersonalHolidayUpdateWithWhereUniqueWithoutTeamMemberInput | PersonalHolidayUpdateWithWhereUniqueWithoutTeamMemberInput[]
    updateMany?: PersonalHolidayUpdateManyWithWhereWithoutTeamMemberInput | PersonalHolidayUpdateManyWithWhereWithoutTeamMemberInput[]
    deleteMany?: PersonalHolidayScalarWhereInput | PersonalHolidayScalarWhereInput[]
  }

  export type WorkItemDependencyCreateNestedManyWithoutWorkItemInput = {
    create?: XOR<WorkItemDependencyCreateWithoutWorkItemInput, WorkItemDependencyUncheckedCreateWithoutWorkItemInput> | WorkItemDependencyCreateWithoutWorkItemInput[] | WorkItemDependencyUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutWorkItemInput | WorkItemDependencyCreateOrConnectWithoutWorkItemInput[]
    createMany?: WorkItemDependencyCreateManyWorkItemInputEnvelope
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
  }

  export type WorkItemDependencyCreateNestedManyWithoutDependsOnInput = {
    create?: XOR<WorkItemDependencyCreateWithoutDependsOnInput, WorkItemDependencyUncheckedCreateWithoutDependsOnInput> | WorkItemDependencyCreateWithoutDependsOnInput[] | WorkItemDependencyUncheckedCreateWithoutDependsOnInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutDependsOnInput | WorkItemDependencyCreateOrConnectWithoutDependsOnInput[]
    createMany?: WorkItemDependencyCreateManyDependsOnInputEnvelope
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
  }

  export type SprintWorkItemCreateNestedManyWithoutWorkItemInput = {
    create?: XOR<SprintWorkItemCreateWithoutWorkItemInput, SprintWorkItemUncheckedCreateWithoutWorkItemInput> | SprintWorkItemCreateWithoutWorkItemInput[] | SprintWorkItemUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutWorkItemInput | SprintWorkItemCreateOrConnectWithoutWorkItemInput[]
    createMany?: SprintWorkItemCreateManyWorkItemInputEnvelope
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
  }

  export type WorkItemDependencyUncheckedCreateNestedManyWithoutWorkItemInput = {
    create?: XOR<WorkItemDependencyCreateWithoutWorkItemInput, WorkItemDependencyUncheckedCreateWithoutWorkItemInput> | WorkItemDependencyCreateWithoutWorkItemInput[] | WorkItemDependencyUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutWorkItemInput | WorkItemDependencyCreateOrConnectWithoutWorkItemInput[]
    createMany?: WorkItemDependencyCreateManyWorkItemInputEnvelope
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
  }

  export type WorkItemDependencyUncheckedCreateNestedManyWithoutDependsOnInput = {
    create?: XOR<WorkItemDependencyCreateWithoutDependsOnInput, WorkItemDependencyUncheckedCreateWithoutDependsOnInput> | WorkItemDependencyCreateWithoutDependsOnInput[] | WorkItemDependencyUncheckedCreateWithoutDependsOnInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutDependsOnInput | WorkItemDependencyCreateOrConnectWithoutDependsOnInput[]
    createMany?: WorkItemDependencyCreateManyDependsOnInputEnvelope
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
  }

  export type SprintWorkItemUncheckedCreateNestedManyWithoutWorkItemInput = {
    create?: XOR<SprintWorkItemCreateWithoutWorkItemInput, SprintWorkItemUncheckedCreateWithoutWorkItemInput> | SprintWorkItemCreateWithoutWorkItemInput[] | SprintWorkItemUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutWorkItemInput | SprintWorkItemCreateOrConnectWithoutWorkItemInput[]
    createMany?: SprintWorkItemCreateManyWorkItemInputEnvelope
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WorkItemDependencyUpdateManyWithoutWorkItemNestedInput = {
    create?: XOR<WorkItemDependencyCreateWithoutWorkItemInput, WorkItemDependencyUncheckedCreateWithoutWorkItemInput> | WorkItemDependencyCreateWithoutWorkItemInput[] | WorkItemDependencyUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutWorkItemInput | WorkItemDependencyCreateOrConnectWithoutWorkItemInput[]
    upsert?: WorkItemDependencyUpsertWithWhereUniqueWithoutWorkItemInput | WorkItemDependencyUpsertWithWhereUniqueWithoutWorkItemInput[]
    createMany?: WorkItemDependencyCreateManyWorkItemInputEnvelope
    set?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    disconnect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    delete?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    update?: WorkItemDependencyUpdateWithWhereUniqueWithoutWorkItemInput | WorkItemDependencyUpdateWithWhereUniqueWithoutWorkItemInput[]
    updateMany?: WorkItemDependencyUpdateManyWithWhereWithoutWorkItemInput | WorkItemDependencyUpdateManyWithWhereWithoutWorkItemInput[]
    deleteMany?: WorkItemDependencyScalarWhereInput | WorkItemDependencyScalarWhereInput[]
  }

  export type WorkItemDependencyUpdateManyWithoutDependsOnNestedInput = {
    create?: XOR<WorkItemDependencyCreateWithoutDependsOnInput, WorkItemDependencyUncheckedCreateWithoutDependsOnInput> | WorkItemDependencyCreateWithoutDependsOnInput[] | WorkItemDependencyUncheckedCreateWithoutDependsOnInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutDependsOnInput | WorkItemDependencyCreateOrConnectWithoutDependsOnInput[]
    upsert?: WorkItemDependencyUpsertWithWhereUniqueWithoutDependsOnInput | WorkItemDependencyUpsertWithWhereUniqueWithoutDependsOnInput[]
    createMany?: WorkItemDependencyCreateManyDependsOnInputEnvelope
    set?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    disconnect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    delete?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    update?: WorkItemDependencyUpdateWithWhereUniqueWithoutDependsOnInput | WorkItemDependencyUpdateWithWhereUniqueWithoutDependsOnInput[]
    updateMany?: WorkItemDependencyUpdateManyWithWhereWithoutDependsOnInput | WorkItemDependencyUpdateManyWithWhereWithoutDependsOnInput[]
    deleteMany?: WorkItemDependencyScalarWhereInput | WorkItemDependencyScalarWhereInput[]
  }

  export type SprintWorkItemUpdateManyWithoutWorkItemNestedInput = {
    create?: XOR<SprintWorkItemCreateWithoutWorkItemInput, SprintWorkItemUncheckedCreateWithoutWorkItemInput> | SprintWorkItemCreateWithoutWorkItemInput[] | SprintWorkItemUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutWorkItemInput | SprintWorkItemCreateOrConnectWithoutWorkItemInput[]
    upsert?: SprintWorkItemUpsertWithWhereUniqueWithoutWorkItemInput | SprintWorkItemUpsertWithWhereUniqueWithoutWorkItemInput[]
    createMany?: SprintWorkItemCreateManyWorkItemInputEnvelope
    set?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    disconnect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    delete?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    update?: SprintWorkItemUpdateWithWhereUniqueWithoutWorkItemInput | SprintWorkItemUpdateWithWhereUniqueWithoutWorkItemInput[]
    updateMany?: SprintWorkItemUpdateManyWithWhereWithoutWorkItemInput | SprintWorkItemUpdateManyWithWhereWithoutWorkItemInput[]
    deleteMany?: SprintWorkItemScalarWhereInput | SprintWorkItemScalarWhereInput[]
  }

  export type WorkItemDependencyUncheckedUpdateManyWithoutWorkItemNestedInput = {
    create?: XOR<WorkItemDependencyCreateWithoutWorkItemInput, WorkItemDependencyUncheckedCreateWithoutWorkItemInput> | WorkItemDependencyCreateWithoutWorkItemInput[] | WorkItemDependencyUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutWorkItemInput | WorkItemDependencyCreateOrConnectWithoutWorkItemInput[]
    upsert?: WorkItemDependencyUpsertWithWhereUniqueWithoutWorkItemInput | WorkItemDependencyUpsertWithWhereUniqueWithoutWorkItemInput[]
    createMany?: WorkItemDependencyCreateManyWorkItemInputEnvelope
    set?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    disconnect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    delete?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    update?: WorkItemDependencyUpdateWithWhereUniqueWithoutWorkItemInput | WorkItemDependencyUpdateWithWhereUniqueWithoutWorkItemInput[]
    updateMany?: WorkItemDependencyUpdateManyWithWhereWithoutWorkItemInput | WorkItemDependencyUpdateManyWithWhereWithoutWorkItemInput[]
    deleteMany?: WorkItemDependencyScalarWhereInput | WorkItemDependencyScalarWhereInput[]
  }

  export type WorkItemDependencyUncheckedUpdateManyWithoutDependsOnNestedInput = {
    create?: XOR<WorkItemDependencyCreateWithoutDependsOnInput, WorkItemDependencyUncheckedCreateWithoutDependsOnInput> | WorkItemDependencyCreateWithoutDependsOnInput[] | WorkItemDependencyUncheckedCreateWithoutDependsOnInput[]
    connectOrCreate?: WorkItemDependencyCreateOrConnectWithoutDependsOnInput | WorkItemDependencyCreateOrConnectWithoutDependsOnInput[]
    upsert?: WorkItemDependencyUpsertWithWhereUniqueWithoutDependsOnInput | WorkItemDependencyUpsertWithWhereUniqueWithoutDependsOnInput[]
    createMany?: WorkItemDependencyCreateManyDependsOnInputEnvelope
    set?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    disconnect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    delete?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    connect?: WorkItemDependencyWhereUniqueInput | WorkItemDependencyWhereUniqueInput[]
    update?: WorkItemDependencyUpdateWithWhereUniqueWithoutDependsOnInput | WorkItemDependencyUpdateWithWhereUniqueWithoutDependsOnInput[]
    updateMany?: WorkItemDependencyUpdateManyWithWhereWithoutDependsOnInput | WorkItemDependencyUpdateManyWithWhereWithoutDependsOnInput[]
    deleteMany?: WorkItemDependencyScalarWhereInput | WorkItemDependencyScalarWhereInput[]
  }

  export type SprintWorkItemUncheckedUpdateManyWithoutWorkItemNestedInput = {
    create?: XOR<SprintWorkItemCreateWithoutWorkItemInput, SprintWorkItemUncheckedCreateWithoutWorkItemInput> | SprintWorkItemCreateWithoutWorkItemInput[] | SprintWorkItemUncheckedCreateWithoutWorkItemInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutWorkItemInput | SprintWorkItemCreateOrConnectWithoutWorkItemInput[]
    upsert?: SprintWorkItemUpsertWithWhereUniqueWithoutWorkItemInput | SprintWorkItemUpsertWithWhereUniqueWithoutWorkItemInput[]
    createMany?: SprintWorkItemCreateManyWorkItemInputEnvelope
    set?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    disconnect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    delete?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    update?: SprintWorkItemUpdateWithWhereUniqueWithoutWorkItemInput | SprintWorkItemUpdateWithWhereUniqueWithoutWorkItemInput[]
    updateMany?: SprintWorkItemUpdateManyWithWhereWithoutWorkItemInput | SprintWorkItemUpdateManyWithWhereWithoutWorkItemInput[]
    deleteMany?: SprintWorkItemScalarWhereInput | SprintWorkItemScalarWhereInput[]
  }

  export type WorkItemCreateNestedOneWithoutDependenciesInput = {
    create?: XOR<WorkItemCreateWithoutDependenciesInput, WorkItemUncheckedCreateWithoutDependenciesInput>
    connectOrCreate?: WorkItemCreateOrConnectWithoutDependenciesInput
    connect?: WorkItemWhereUniqueInput
  }

  export type WorkItemCreateNestedOneWithoutDependentWorkItemsInput = {
    create?: XOR<WorkItemCreateWithoutDependentWorkItemsInput, WorkItemUncheckedCreateWithoutDependentWorkItemsInput>
    connectOrCreate?: WorkItemCreateOrConnectWithoutDependentWorkItemsInput
    connect?: WorkItemWhereUniqueInput
  }

  export type WorkItemUpdateOneRequiredWithoutDependenciesNestedInput = {
    create?: XOR<WorkItemCreateWithoutDependenciesInput, WorkItemUncheckedCreateWithoutDependenciesInput>
    connectOrCreate?: WorkItemCreateOrConnectWithoutDependenciesInput
    upsert?: WorkItemUpsertWithoutDependenciesInput
    connect?: WorkItemWhereUniqueInput
    update?: XOR<XOR<WorkItemUpdateToOneWithWhereWithoutDependenciesInput, WorkItemUpdateWithoutDependenciesInput>, WorkItemUncheckedUpdateWithoutDependenciesInput>
  }

  export type WorkItemUpdateOneRequiredWithoutDependentWorkItemsNestedInput = {
    create?: XOR<WorkItemCreateWithoutDependentWorkItemsInput, WorkItemUncheckedCreateWithoutDependentWorkItemsInput>
    connectOrCreate?: WorkItemCreateOrConnectWithoutDependentWorkItemsInput
    upsert?: WorkItemUpsertWithoutDependentWorkItemsInput
    connect?: WorkItemWhereUniqueInput
    update?: XOR<XOR<WorkItemUpdateToOneWithWhereWithoutDependentWorkItemsInput, WorkItemUpdateWithoutDependentWorkItemsInput>, WorkItemUncheckedUpdateWithoutDependentWorkItemsInput>
  }

  export type SprintWorkItemCreateNestedManyWithoutSprintInput = {
    create?: XOR<SprintWorkItemCreateWithoutSprintInput, SprintWorkItemUncheckedCreateWithoutSprintInput> | SprintWorkItemCreateWithoutSprintInput[] | SprintWorkItemUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutSprintInput | SprintWorkItemCreateOrConnectWithoutSprintInput[]
    createMany?: SprintWorkItemCreateManySprintInputEnvelope
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
  }

  export type SprintWorkItemUncheckedCreateNestedManyWithoutSprintInput = {
    create?: XOR<SprintWorkItemCreateWithoutSprintInput, SprintWorkItemUncheckedCreateWithoutSprintInput> | SprintWorkItemCreateWithoutSprintInput[] | SprintWorkItemUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutSprintInput | SprintWorkItemCreateOrConnectWithoutSprintInput[]
    createMany?: SprintWorkItemCreateManySprintInputEnvelope
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SprintWorkItemUpdateManyWithoutSprintNestedInput = {
    create?: XOR<SprintWorkItemCreateWithoutSprintInput, SprintWorkItemUncheckedCreateWithoutSprintInput> | SprintWorkItemCreateWithoutSprintInput[] | SprintWorkItemUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutSprintInput | SprintWorkItemCreateOrConnectWithoutSprintInput[]
    upsert?: SprintWorkItemUpsertWithWhereUniqueWithoutSprintInput | SprintWorkItemUpsertWithWhereUniqueWithoutSprintInput[]
    createMany?: SprintWorkItemCreateManySprintInputEnvelope
    set?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    disconnect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    delete?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    update?: SprintWorkItemUpdateWithWhereUniqueWithoutSprintInput | SprintWorkItemUpdateWithWhereUniqueWithoutSprintInput[]
    updateMany?: SprintWorkItemUpdateManyWithWhereWithoutSprintInput | SprintWorkItemUpdateManyWithWhereWithoutSprintInput[]
    deleteMany?: SprintWorkItemScalarWhereInput | SprintWorkItemScalarWhereInput[]
  }

  export type SprintWorkItemUncheckedUpdateManyWithoutSprintNestedInput = {
    create?: XOR<SprintWorkItemCreateWithoutSprintInput, SprintWorkItemUncheckedCreateWithoutSprintInput> | SprintWorkItemCreateWithoutSprintInput[] | SprintWorkItemUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: SprintWorkItemCreateOrConnectWithoutSprintInput | SprintWorkItemCreateOrConnectWithoutSprintInput[]
    upsert?: SprintWorkItemUpsertWithWhereUniqueWithoutSprintInput | SprintWorkItemUpsertWithWhereUniqueWithoutSprintInput[]
    createMany?: SprintWorkItemCreateManySprintInputEnvelope
    set?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    disconnect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    delete?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    connect?: SprintWorkItemWhereUniqueInput | SprintWorkItemWhereUniqueInput[]
    update?: SprintWorkItemUpdateWithWhereUniqueWithoutSprintInput | SprintWorkItemUpdateWithWhereUniqueWithoutSprintInput[]
    updateMany?: SprintWorkItemUpdateManyWithWhereWithoutSprintInput | SprintWorkItemUpdateManyWithWhereWithoutSprintInput[]
    deleteMany?: SprintWorkItemScalarWhereInput | SprintWorkItemScalarWhereInput[]
  }

  export type SprintCreateNestedOneWithoutWorkItemAssignmentsInput = {
    create?: XOR<SprintCreateWithoutWorkItemAssignmentsInput, SprintUncheckedCreateWithoutWorkItemAssignmentsInput>
    connectOrCreate?: SprintCreateOrConnectWithoutWorkItemAssignmentsInput
    connect?: SprintWhereUniqueInput
  }

  export type WorkItemCreateNestedOneWithoutSprintAssignmentsInput = {
    create?: XOR<WorkItemCreateWithoutSprintAssignmentsInput, WorkItemUncheckedCreateWithoutSprintAssignmentsInput>
    connectOrCreate?: WorkItemCreateOrConnectWithoutSprintAssignmentsInput
    connect?: WorkItemWhereUniqueInput
  }

  export type SprintUpdateOneRequiredWithoutWorkItemAssignmentsNestedInput = {
    create?: XOR<SprintCreateWithoutWorkItemAssignmentsInput, SprintUncheckedCreateWithoutWorkItemAssignmentsInput>
    connectOrCreate?: SprintCreateOrConnectWithoutWorkItemAssignmentsInput
    upsert?: SprintUpsertWithoutWorkItemAssignmentsInput
    connect?: SprintWhereUniqueInput
    update?: XOR<XOR<SprintUpdateToOneWithWhereWithoutWorkItemAssignmentsInput, SprintUpdateWithoutWorkItemAssignmentsInput>, SprintUncheckedUpdateWithoutWorkItemAssignmentsInput>
  }

  export type WorkItemUpdateOneRequiredWithoutSprintAssignmentsNestedInput = {
    create?: XOR<WorkItemCreateWithoutSprintAssignmentsInput, WorkItemUncheckedCreateWithoutSprintAssignmentsInput>
    connectOrCreate?: WorkItemCreateOrConnectWithoutSprintAssignmentsInput
    upsert?: WorkItemUpsertWithoutSprintAssignmentsInput
    connect?: WorkItemWhereUniqueInput
    update?: XOR<XOR<WorkItemUpdateToOneWithWhereWithoutSprintAssignmentsInput, WorkItemUpdateWithoutSprintAssignmentsInput>, WorkItemUncheckedUpdateWithoutSprintAssignmentsInput>
  }

  export type TeamMemberCreateNestedOneWithoutPersonalHolidaysInput = {
    create?: XOR<TeamMemberCreateWithoutPersonalHolidaysInput, TeamMemberUncheckedCreateWithoutPersonalHolidaysInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutPersonalHolidaysInput
    connect?: TeamMemberWhereUniqueInput
  }

  export type TeamMemberUpdateOneRequiredWithoutPersonalHolidaysNestedInput = {
    create?: XOR<TeamMemberCreateWithoutPersonalHolidaysInput, TeamMemberUncheckedCreateWithoutPersonalHolidaysInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutPersonalHolidaysInput
    upsert?: TeamMemberUpsertWithoutPersonalHolidaysInput
    connect?: TeamMemberWhereUniqueInput
    update?: XOR<XOR<TeamMemberUpdateToOneWithWhereWithoutPersonalHolidaysInput, TeamMemberUpdateWithoutPersonalHolidaysInput>, TeamMemberUncheckedUpdateWithoutPersonalHolidaysInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PersonalHolidayCreateWithoutTeamMemberInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type PersonalHolidayUncheckedCreateWithoutTeamMemberInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type PersonalHolidayCreateOrConnectWithoutTeamMemberInput = {
    where: PersonalHolidayWhereUniqueInput
    create: XOR<PersonalHolidayCreateWithoutTeamMemberInput, PersonalHolidayUncheckedCreateWithoutTeamMemberInput>
  }

  export type PersonalHolidayCreateManyTeamMemberInputEnvelope = {
    data: PersonalHolidayCreateManyTeamMemberInput | PersonalHolidayCreateManyTeamMemberInput[]
    skipDuplicates?: boolean
  }

  export type PersonalHolidayUpsertWithWhereUniqueWithoutTeamMemberInput = {
    where: PersonalHolidayWhereUniqueInput
    update: XOR<PersonalHolidayUpdateWithoutTeamMemberInput, PersonalHolidayUncheckedUpdateWithoutTeamMemberInput>
    create: XOR<PersonalHolidayCreateWithoutTeamMemberInput, PersonalHolidayUncheckedCreateWithoutTeamMemberInput>
  }

  export type PersonalHolidayUpdateWithWhereUniqueWithoutTeamMemberInput = {
    where: PersonalHolidayWhereUniqueInput
    data: XOR<PersonalHolidayUpdateWithoutTeamMemberInput, PersonalHolidayUncheckedUpdateWithoutTeamMemberInput>
  }

  export type PersonalHolidayUpdateManyWithWhereWithoutTeamMemberInput = {
    where: PersonalHolidayScalarWhereInput
    data: XOR<PersonalHolidayUpdateManyMutationInput, PersonalHolidayUncheckedUpdateManyWithoutTeamMemberInput>
  }

  export type PersonalHolidayScalarWhereInput = {
    AND?: PersonalHolidayScalarWhereInput | PersonalHolidayScalarWhereInput[]
    OR?: PersonalHolidayScalarWhereInput[]
    NOT?: PersonalHolidayScalarWhereInput | PersonalHolidayScalarWhereInput[]
    id?: StringFilter<"PersonalHoliday"> | string
    teamMemberId?: StringFilter<"PersonalHoliday"> | string
    startDate?: DateTimeFilter<"PersonalHoliday"> | Date | string
    endDate?: DateTimeFilter<"PersonalHoliday"> | Date | string
    description?: StringNullableFilter<"PersonalHoliday"> | string | null
    createdAt?: DateTimeFilter<"PersonalHoliday"> | Date | string
  }

  export type WorkItemDependencyCreateWithoutWorkItemInput = {
    createdAt?: Date | string
    dependsOn: WorkItemCreateNestedOneWithoutDependentWorkItemsInput
  }

  export type WorkItemDependencyUncheckedCreateWithoutWorkItemInput = {
    dependsOnId: string
    createdAt?: Date | string
  }

  export type WorkItemDependencyCreateOrConnectWithoutWorkItemInput = {
    where: WorkItemDependencyWhereUniqueInput
    create: XOR<WorkItemDependencyCreateWithoutWorkItemInput, WorkItemDependencyUncheckedCreateWithoutWorkItemInput>
  }

  export type WorkItemDependencyCreateManyWorkItemInputEnvelope = {
    data: WorkItemDependencyCreateManyWorkItemInput | WorkItemDependencyCreateManyWorkItemInput[]
    skipDuplicates?: boolean
  }

  export type WorkItemDependencyCreateWithoutDependsOnInput = {
    createdAt?: Date | string
    workItem: WorkItemCreateNestedOneWithoutDependenciesInput
  }

  export type WorkItemDependencyUncheckedCreateWithoutDependsOnInput = {
    workItemId: string
    createdAt?: Date | string
  }

  export type WorkItemDependencyCreateOrConnectWithoutDependsOnInput = {
    where: WorkItemDependencyWhereUniqueInput
    create: XOR<WorkItemDependencyCreateWithoutDependsOnInput, WorkItemDependencyUncheckedCreateWithoutDependsOnInput>
  }

  export type WorkItemDependencyCreateManyDependsOnInputEnvelope = {
    data: WorkItemDependencyCreateManyDependsOnInput | WorkItemDependencyCreateManyDependsOnInput[]
    skipDuplicates?: boolean
  }

  export type SprintWorkItemCreateWithoutWorkItemInput = {
    assignedAt?: Date | string
    sprint: SprintCreateNestedOneWithoutWorkItemAssignmentsInput
  }

  export type SprintWorkItemUncheckedCreateWithoutWorkItemInput = {
    sprintId: string
    assignedAt?: Date | string
  }

  export type SprintWorkItemCreateOrConnectWithoutWorkItemInput = {
    where: SprintWorkItemWhereUniqueInput
    create: XOR<SprintWorkItemCreateWithoutWorkItemInput, SprintWorkItemUncheckedCreateWithoutWorkItemInput>
  }

  export type SprintWorkItemCreateManyWorkItemInputEnvelope = {
    data: SprintWorkItemCreateManyWorkItemInput | SprintWorkItemCreateManyWorkItemInput[]
    skipDuplicates?: boolean
  }

  export type WorkItemDependencyUpsertWithWhereUniqueWithoutWorkItemInput = {
    where: WorkItemDependencyWhereUniqueInput
    update: XOR<WorkItemDependencyUpdateWithoutWorkItemInput, WorkItemDependencyUncheckedUpdateWithoutWorkItemInput>
    create: XOR<WorkItemDependencyCreateWithoutWorkItemInput, WorkItemDependencyUncheckedCreateWithoutWorkItemInput>
  }

  export type WorkItemDependencyUpdateWithWhereUniqueWithoutWorkItemInput = {
    where: WorkItemDependencyWhereUniqueInput
    data: XOR<WorkItemDependencyUpdateWithoutWorkItemInput, WorkItemDependencyUncheckedUpdateWithoutWorkItemInput>
  }

  export type WorkItemDependencyUpdateManyWithWhereWithoutWorkItemInput = {
    where: WorkItemDependencyScalarWhereInput
    data: XOR<WorkItemDependencyUpdateManyMutationInput, WorkItemDependencyUncheckedUpdateManyWithoutWorkItemInput>
  }

  export type WorkItemDependencyScalarWhereInput = {
    AND?: WorkItemDependencyScalarWhereInput | WorkItemDependencyScalarWhereInput[]
    OR?: WorkItemDependencyScalarWhereInput[]
    NOT?: WorkItemDependencyScalarWhereInput | WorkItemDependencyScalarWhereInput[]
    workItemId?: StringFilter<"WorkItemDependency"> | string
    dependsOnId?: StringFilter<"WorkItemDependency"> | string
    createdAt?: DateTimeFilter<"WorkItemDependency"> | Date | string
  }

  export type WorkItemDependencyUpsertWithWhereUniqueWithoutDependsOnInput = {
    where: WorkItemDependencyWhereUniqueInput
    update: XOR<WorkItemDependencyUpdateWithoutDependsOnInput, WorkItemDependencyUncheckedUpdateWithoutDependsOnInput>
    create: XOR<WorkItemDependencyCreateWithoutDependsOnInput, WorkItemDependencyUncheckedCreateWithoutDependsOnInput>
  }

  export type WorkItemDependencyUpdateWithWhereUniqueWithoutDependsOnInput = {
    where: WorkItemDependencyWhereUniqueInput
    data: XOR<WorkItemDependencyUpdateWithoutDependsOnInput, WorkItemDependencyUncheckedUpdateWithoutDependsOnInput>
  }

  export type WorkItemDependencyUpdateManyWithWhereWithoutDependsOnInput = {
    where: WorkItemDependencyScalarWhereInput
    data: XOR<WorkItemDependencyUpdateManyMutationInput, WorkItemDependencyUncheckedUpdateManyWithoutDependsOnInput>
  }

  export type SprintWorkItemUpsertWithWhereUniqueWithoutWorkItemInput = {
    where: SprintWorkItemWhereUniqueInput
    update: XOR<SprintWorkItemUpdateWithoutWorkItemInput, SprintWorkItemUncheckedUpdateWithoutWorkItemInput>
    create: XOR<SprintWorkItemCreateWithoutWorkItemInput, SprintWorkItemUncheckedCreateWithoutWorkItemInput>
  }

  export type SprintWorkItemUpdateWithWhereUniqueWithoutWorkItemInput = {
    where: SprintWorkItemWhereUniqueInput
    data: XOR<SprintWorkItemUpdateWithoutWorkItemInput, SprintWorkItemUncheckedUpdateWithoutWorkItemInput>
  }

  export type SprintWorkItemUpdateManyWithWhereWithoutWorkItemInput = {
    where: SprintWorkItemScalarWhereInput
    data: XOR<SprintWorkItemUpdateManyMutationInput, SprintWorkItemUncheckedUpdateManyWithoutWorkItemInput>
  }

  export type SprintWorkItemScalarWhereInput = {
    AND?: SprintWorkItemScalarWhereInput | SprintWorkItemScalarWhereInput[]
    OR?: SprintWorkItemScalarWhereInput[]
    NOT?: SprintWorkItemScalarWhereInput | SprintWorkItemScalarWhereInput[]
    sprintId?: StringFilter<"SprintWorkItem"> | string
    workItemId?: StringFilter<"SprintWorkItem"> | string
    assignedAt?: DateTimeFilter<"SprintWorkItem"> | Date | string
  }

  export type WorkItemCreateWithoutDependenciesInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependentWorkItems?: WorkItemDependencyCreateNestedManyWithoutDependsOnInput
    sprintAssignments?: SprintWorkItemCreateNestedManyWithoutWorkItemInput
  }

  export type WorkItemUncheckedCreateWithoutDependenciesInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependentWorkItems?: WorkItemDependencyUncheckedCreateNestedManyWithoutDependsOnInput
    sprintAssignments?: SprintWorkItemUncheckedCreateNestedManyWithoutWorkItemInput
  }

  export type WorkItemCreateOrConnectWithoutDependenciesInput = {
    where: WorkItemWhereUniqueInput
    create: XOR<WorkItemCreateWithoutDependenciesInput, WorkItemUncheckedCreateWithoutDependenciesInput>
  }

  export type WorkItemCreateWithoutDependentWorkItemsInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependencies?: WorkItemDependencyCreateNestedManyWithoutWorkItemInput
    sprintAssignments?: SprintWorkItemCreateNestedManyWithoutWorkItemInput
  }

  export type WorkItemUncheckedCreateWithoutDependentWorkItemsInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependencies?: WorkItemDependencyUncheckedCreateNestedManyWithoutWorkItemInput
    sprintAssignments?: SprintWorkItemUncheckedCreateNestedManyWithoutWorkItemInput
  }

  export type WorkItemCreateOrConnectWithoutDependentWorkItemsInput = {
    where: WorkItemWhereUniqueInput
    create: XOR<WorkItemCreateWithoutDependentWorkItemsInput, WorkItemUncheckedCreateWithoutDependentWorkItemsInput>
  }

  export type WorkItemUpsertWithoutDependenciesInput = {
    update: XOR<WorkItemUpdateWithoutDependenciesInput, WorkItemUncheckedUpdateWithoutDependenciesInput>
    create: XOR<WorkItemCreateWithoutDependenciesInput, WorkItemUncheckedCreateWithoutDependenciesInput>
    where?: WorkItemWhereInput
  }

  export type WorkItemUpdateToOneWithWhereWithoutDependenciesInput = {
    where?: WorkItemWhereInput
    data: XOR<WorkItemUpdateWithoutDependenciesInput, WorkItemUncheckedUpdateWithoutDependenciesInput>
  }

  export type WorkItemUpdateWithoutDependenciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependentWorkItems?: WorkItemDependencyUpdateManyWithoutDependsOnNestedInput
    sprintAssignments?: SprintWorkItemUpdateManyWithoutWorkItemNestedInput
  }

  export type WorkItemUncheckedUpdateWithoutDependenciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependentWorkItems?: WorkItemDependencyUncheckedUpdateManyWithoutDependsOnNestedInput
    sprintAssignments?: SprintWorkItemUncheckedUpdateManyWithoutWorkItemNestedInput
  }

  export type WorkItemUpsertWithoutDependentWorkItemsInput = {
    update: XOR<WorkItemUpdateWithoutDependentWorkItemsInput, WorkItemUncheckedUpdateWithoutDependentWorkItemsInput>
    create: XOR<WorkItemCreateWithoutDependentWorkItemsInput, WorkItemUncheckedCreateWithoutDependentWorkItemsInput>
    where?: WorkItemWhereInput
  }

  export type WorkItemUpdateToOneWithWhereWithoutDependentWorkItemsInput = {
    where?: WorkItemWhereInput
    data: XOR<WorkItemUpdateWithoutDependentWorkItemsInput, WorkItemUncheckedUpdateWithoutDependentWorkItemsInput>
  }

  export type WorkItemUpdateWithoutDependentWorkItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependencies?: WorkItemDependencyUpdateManyWithoutWorkItemNestedInput
    sprintAssignments?: SprintWorkItemUpdateManyWithoutWorkItemNestedInput
  }

  export type WorkItemUncheckedUpdateWithoutDependentWorkItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependencies?: WorkItemDependencyUncheckedUpdateManyWithoutWorkItemNestedInput
    sprintAssignments?: SprintWorkItemUncheckedUpdateManyWithoutWorkItemNestedInput
  }

  export type SprintWorkItemCreateWithoutSprintInput = {
    assignedAt?: Date | string
    workItem: WorkItemCreateNestedOneWithoutSprintAssignmentsInput
  }

  export type SprintWorkItemUncheckedCreateWithoutSprintInput = {
    workItemId: string
    assignedAt?: Date | string
  }

  export type SprintWorkItemCreateOrConnectWithoutSprintInput = {
    where: SprintWorkItemWhereUniqueInput
    create: XOR<SprintWorkItemCreateWithoutSprintInput, SprintWorkItemUncheckedCreateWithoutSprintInput>
  }

  export type SprintWorkItemCreateManySprintInputEnvelope = {
    data: SprintWorkItemCreateManySprintInput | SprintWorkItemCreateManySprintInput[]
    skipDuplicates?: boolean
  }

  export type SprintWorkItemUpsertWithWhereUniqueWithoutSprintInput = {
    where: SprintWorkItemWhereUniqueInput
    update: XOR<SprintWorkItemUpdateWithoutSprintInput, SprintWorkItemUncheckedUpdateWithoutSprintInput>
    create: XOR<SprintWorkItemCreateWithoutSprintInput, SprintWorkItemUncheckedCreateWithoutSprintInput>
  }

  export type SprintWorkItemUpdateWithWhereUniqueWithoutSprintInput = {
    where: SprintWorkItemWhereUniqueInput
    data: XOR<SprintWorkItemUpdateWithoutSprintInput, SprintWorkItemUncheckedUpdateWithoutSprintInput>
  }

  export type SprintWorkItemUpdateManyWithWhereWithoutSprintInput = {
    where: SprintWorkItemScalarWhereInput
    data: XOR<SprintWorkItemUpdateManyMutationInput, SprintWorkItemUncheckedUpdateManyWithoutSprintInput>
  }

  export type SprintCreateWithoutWorkItemAssignmentsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    plannedVelocity: number
    actualVelocity?: number | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintUncheckedCreateWithoutWorkItemAssignmentsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    plannedVelocity: number
    actualVelocity?: number | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SprintCreateOrConnectWithoutWorkItemAssignmentsInput = {
    where: SprintWhereUniqueInput
    create: XOR<SprintCreateWithoutWorkItemAssignmentsInput, SprintUncheckedCreateWithoutWorkItemAssignmentsInput>
  }

  export type WorkItemCreateWithoutSprintAssignmentsInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependencies?: WorkItemDependencyCreateNestedManyWithoutWorkItemInput
    dependentWorkItems?: WorkItemDependencyCreateNestedManyWithoutDependsOnInput
  }

  export type WorkItemUncheckedCreateWithoutSprintAssignmentsInput = {
    id?: string
    jiraId?: string | null
    title: string
    description?: string | null
    estimateStoryPoints: number
    requiredCompletionDate: Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: string
    jiraStatus?: string | null
    epicId?: string | null
    isEpic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dependencies?: WorkItemDependencyUncheckedCreateNestedManyWithoutWorkItemInput
    dependentWorkItems?: WorkItemDependencyUncheckedCreateNestedManyWithoutDependsOnInput
  }

  export type WorkItemCreateOrConnectWithoutSprintAssignmentsInput = {
    where: WorkItemWhereUniqueInput
    create: XOR<WorkItemCreateWithoutSprintAssignmentsInput, WorkItemUncheckedCreateWithoutSprintAssignmentsInput>
  }

  export type SprintUpsertWithoutWorkItemAssignmentsInput = {
    update: XOR<SprintUpdateWithoutWorkItemAssignmentsInput, SprintUncheckedUpdateWithoutWorkItemAssignmentsInput>
    create: XOR<SprintCreateWithoutWorkItemAssignmentsInput, SprintUncheckedCreateWithoutWorkItemAssignmentsInput>
    where?: SprintWhereInput
  }

  export type SprintUpdateToOneWithWhereWithoutWorkItemAssignmentsInput = {
    where?: SprintWhereInput
    data: XOR<SprintUpdateWithoutWorkItemAssignmentsInput, SprintUncheckedUpdateWithoutWorkItemAssignmentsInput>
  }

  export type SprintUpdateWithoutWorkItemAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plannedVelocity?: FloatFieldUpdateOperationsInput | number
    actualVelocity?: NullableFloatFieldUpdateOperationsInput | number | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintUncheckedUpdateWithoutWorkItemAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plannedVelocity?: FloatFieldUpdateOperationsInput | number
    actualVelocity?: NullableFloatFieldUpdateOperationsInput | number | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemUpsertWithoutSprintAssignmentsInput = {
    update: XOR<WorkItemUpdateWithoutSprintAssignmentsInput, WorkItemUncheckedUpdateWithoutSprintAssignmentsInput>
    create: XOR<WorkItemCreateWithoutSprintAssignmentsInput, WorkItemUncheckedCreateWithoutSprintAssignmentsInput>
    where?: WorkItemWhereInput
  }

  export type WorkItemUpdateToOneWithWhereWithoutSprintAssignmentsInput = {
    where?: WorkItemWhereInput
    data: XOR<WorkItemUpdateWithoutSprintAssignmentsInput, WorkItemUncheckedUpdateWithoutSprintAssignmentsInput>
  }

  export type WorkItemUpdateWithoutSprintAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependencies?: WorkItemDependencyUpdateManyWithoutWorkItemNestedInput
    dependentWorkItems?: WorkItemDependencyUpdateManyWithoutDependsOnNestedInput
  }

  export type WorkItemUncheckedUpdateWithoutSprintAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jiraId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    estimateStoryPoints?: FloatFieldUpdateOperationsInput | number
    requiredCompletionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredSkills?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    jiraStatus?: NullableStringFieldUpdateOperationsInput | string | null
    epicId?: NullableStringFieldUpdateOperationsInput | string | null
    isEpic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependencies?: WorkItemDependencyUncheckedUpdateManyWithoutWorkItemNestedInput
    dependentWorkItems?: WorkItemDependencyUncheckedUpdateManyWithoutDependsOnNestedInput
  }

  export type TeamMemberCreateWithoutPersonalHolidaysInput = {
    id?: string
    name: string
    capacity?: number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamMemberUncheckedCreateWithoutPersonalHolidaysInput = {
    id?: string
    name: string
    capacity?: number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamMemberCreateOrConnectWithoutPersonalHolidaysInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutPersonalHolidaysInput, TeamMemberUncheckedCreateWithoutPersonalHolidaysInput>
  }

  export type TeamMemberUpsertWithoutPersonalHolidaysInput = {
    update: XOR<TeamMemberUpdateWithoutPersonalHolidaysInput, TeamMemberUncheckedUpdateWithoutPersonalHolidaysInput>
    create: XOR<TeamMemberCreateWithoutPersonalHolidaysInput, TeamMemberUncheckedCreateWithoutPersonalHolidaysInput>
    where?: TeamMemberWhereInput
  }

  export type TeamMemberUpdateToOneWithWhereWithoutPersonalHolidaysInput = {
    where?: TeamMemberWhereInput
    data: XOR<TeamMemberUpdateWithoutPersonalHolidaysInput, TeamMemberUncheckedUpdateWithoutPersonalHolidaysInput>
  }

  export type TeamMemberUpdateWithoutPersonalHolidaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberUncheckedUpdateWithoutPersonalHolidaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    skills?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalHolidayCreateManyTeamMemberInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    description?: string | null
    createdAt?: Date | string
  }

  export type PersonalHolidayUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalHolidayUncheckedUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalHolidayUncheckedUpdateManyWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyCreateManyWorkItemInput = {
    dependsOnId: string
    createdAt?: Date | string
  }

  export type WorkItemDependencyCreateManyDependsOnInput = {
    workItemId: string
    createdAt?: Date | string
  }

  export type SprintWorkItemCreateManyWorkItemInput = {
    sprintId: string
    assignedAt?: Date | string
  }

  export type WorkItemDependencyUpdateWithoutWorkItemInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dependsOn?: WorkItemUpdateOneRequiredWithoutDependentWorkItemsNestedInput
  }

  export type WorkItemDependencyUncheckedUpdateWithoutWorkItemInput = {
    dependsOnId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyUncheckedUpdateManyWithoutWorkItemInput = {
    dependsOnId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyUpdateWithoutDependsOnInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workItem?: WorkItemUpdateOneRequiredWithoutDependenciesNestedInput
  }

  export type WorkItemDependencyUncheckedUpdateWithoutDependsOnInput = {
    workItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkItemDependencyUncheckedUpdateManyWithoutDependsOnInput = {
    workItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemUpdateWithoutWorkItemInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: SprintUpdateOneRequiredWithoutWorkItemAssignmentsNestedInput
  }

  export type SprintWorkItemUncheckedUpdateWithoutWorkItemInput = {
    sprintId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemUncheckedUpdateManyWithoutWorkItemInput = {
    sprintId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemCreateManySprintInput = {
    workItemId: string
    assignedAt?: Date | string
  }

  export type SprintWorkItemUpdateWithoutSprintInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workItem?: WorkItemUpdateOneRequiredWithoutSprintAssignmentsNestedInput
  }

  export type SprintWorkItemUncheckedUpdateWithoutSprintInput = {
    workItemId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintWorkItemUncheckedUpdateManyWithoutSprintInput = {
    workItemId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}